import { Client } from '@botpress/chat';
export type SignalEmitter = Awaited<ReturnType<Client['listenConversation']>>;
export type DisconnectedState = {};
export type UserCreatingState = DisconnectedState & {};
export type UserCreatedState = UserCreatingState & {
    userId: string;
    userKey: string;
};
export type ConversationCreatingState = UserCreatedState & {};
export type ConversationCreatedState = ConversationCreatingState & {
    conversationId: string;
    signalEmitter: SignalEmitter;
};
export type ChatClientState = (DisconnectedState & {
    status: 'disconnected';
}) | (UserCreatingState & {
    status: 'user_creating';
}) | (UserCreatedState & {
    status: 'user_created';
}) | (ConversationCreatingState & {
    status: 'conversation_creating';
}) | (ConversationCreatedState & {
    status: 'conversation_created';
});
export type ChatClientStatus = ChatClientState['status'];
export type StateOf<S extends ChatClientStatus> = Extract<ChatClientState, {
    status: S;
}>;
type GT<S extends ChatClientStatus> = S extends 'disconnected' ? 'user_creating' | 'user_created' | 'conversation_creating' | 'conversation_created' : S extends 'user_creating' ? 'user_created' | 'conversation_creating' | 'conversation_created' : S extends 'user_created' ? 'conversation_creating' | 'conversation_created' : S extends 'conversation_creating' ? 'conversation_created' : never;
type LT<S extends ChatClientStatus> = S extends 'conversation_created' ? 'conversation_creating' | 'user_created' | 'user_creating' | 'disconnected' : S extends 'conversation_creating' ? 'user_created' | 'user_creating' | 'disconnected' : S extends 'user_created' ? 'user_creating' | 'disconnected' : S extends 'user_creating' ? 'disconnected' : never;
export declare const isEq: <S extends "disconnected" | "user_creating" | "user_created" | "conversation_creating" | "conversation_created">(s: ChatClientState, target: S) => s is StateOf<S>;
export declare const isGt: <S extends "disconnected" | "user_creating" | "user_created" | "conversation_creating" | "conversation_created">(s: ChatClientState, target: S) => s is StateOf<GT<S>>;
export declare const isLt: <S extends "disconnected" | "user_creating" | "user_created" | "conversation_creating" | "conversation_created">(s: ChatClientState, target: S) => s is StateOf<LT<S>>;
export declare const isGte: <S extends "disconnected" | "user_creating" | "user_created" | "conversation_creating" | "conversation_created">(s: ChatClientState, target: S) => s is StateOf<S | GT<S>>;
export declare const isLte: <S extends "disconnected" | "user_creating" | "user_created" | "conversation_creating" | "conversation_created">(s: ChatClientState, target: S) => s is StateOf<S | LT<S>>;
export declare class InvalidStateError extends Error {
    readonly state: ChatClientState;
    constructor(state: ChatClientState);
}
export {};
