import { EventEmitter } from '../../utils';
import { Events, Message, UserCredentials, WebChatClient } from '../types';
export type ChatClientProps = {
    apiUrl: string;
    clientId: string;
};
export declare class ChatClient extends EventEmitter<Events> implements WebChatClient {
    private _client;
    private _webhookId;
    private _state;
    constructor(props: ChatClientProps);
    get clientId(): string;
    get userId(): string | undefined;
    get conversationId(): string | undefined;
    connect(creds?: UserCredentials): Promise<UserCredentials | undefined>;
    private _initialConnect;
    private _reConnect;
    disconnect(): Promise<void>;
    sendMessage(message: string): Promise<void>;
    switchConversation(id: string): Promise<void>;
    conversationExists(id: string): Promise<boolean>;
    userExists({ userToken }: UserCredentials): Promise<boolean>;
    newConversation(): Promise<void>;
    private _createNewConversation;
    listMessages(): Promise<Message[]>;
    private _connectConversation;
    private _mapMessage;
}
