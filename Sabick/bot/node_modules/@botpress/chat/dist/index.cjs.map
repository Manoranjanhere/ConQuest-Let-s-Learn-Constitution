{
  "version": 3,
  "sources": ["../src/index.ts", "../src/gen/client/client.ts", "../src/gen/client/api.ts", "../src/gen/client/base.ts", "../src/gen/client/common.ts", "../src/gen/client/errors.ts", "../src/event-emitter.ts", "../src/eventsource.ts", "../src/gen/signals/messageCreatedSignal.z.ts", "../src/gen/signals/index.ts", "../src/signal-listener.ts"],
  "sourcesContent": ["import { isBrowser } from 'browser-or-node'\nimport axios from 'axios'\nimport { ApiClient as AutoGeneratedClient } from './gen/client/client'\nimport { SignalListener } from './signal-listener'\n// import type { Types as Models } from './gen/models'\n// import * as jwt from 'jsonwebtoken'\n\nexport * as axios from 'axios'\nexport type { Message, Conversation, User } from './gen/client'\nexport * from './gen/client/errors'\n\nconst _100mb = 100 * 1024 * 1024\nconst maxBodyLength = _100mb\nconst maxContentLength = _100mb\nconst defaultTimeout = 60_000\n\nexport type Headers = Record<string, string>\nexport type ClientProps = {\n  apiUrl: string\n  timeout?: number\n  headers?: Headers\n}\n\ntype IOf<T extends object> = {\n  [K in keyof T]: T[K]\n}\ntype IAutoClient = IOf<AutoGeneratedClient>\ntype IClient = Omit<IAutoClient, 'listenConversation'>\n\ntype ListenConversationOperation = IAutoClient['listenConversation']\ntype ListenConversationArgs = Parameters<ListenConversationOperation>[0]\n\nexport class Client implements IClient {\n  private _auto: AutoGeneratedClient\n\n  public constructor(public readonly props: Readonly<ClientProps>) {\n    const { apiUrl } = props\n\n    const axiosClient = Client._createAxios(props)\n    this._auto = new AutoGeneratedClient(undefined, apiUrl, axiosClient)\n  }\n\n  // public readonly formatKey = (content: Models['chatKey'], encryptionKey: string) =>\n  //   jwt.sign(content, encryptionKey, { algorithm: 'HS256' })\n\n  public readonly createConversation: IAutoClient['createConversation'] = (x) => this._auto.createConversation(x)\n  public readonly getConversation: IAutoClient['getConversation'] = (x) => this._auto.getConversation(x)\n  public readonly getOrCreateConversation: IAutoClient['getOrCreateConversation'] = (x) =>\n    this._auto.getOrCreateConversation(x)\n  public readonly updateConversation: IAutoClient['updateConversation'] = (x) => this._auto.updateConversation(x)\n  public readonly deleteConversation: IAutoClient['deleteConversation'] = (x) => this._auto.deleteConversation(x)\n  public readonly listConversations: IAutoClient['listConversations'] = (x) => this._auto.listConversations(x)\n  public readonly listConversationMessages: IAutoClient['listConversationMessages'] = (x) =>\n    this._auto.listConversationMessages(x)\n  public readonly addParticipant: IAutoClient['addParticipant'] = (x) => this._auto.addParticipant(x)\n  public readonly removeParticipant: IAutoClient['removeParticipant'] = (x) => this._auto.removeParticipant(x)\n  public readonly getParticipant: IAutoClient['getParticipant'] = (x) => this._auto.getParticipant(x)\n  public readonly listParticipants: IAutoClient['listParticipants'] = (x) => this._auto.listParticipants(x)\n  public readonly createMessage: IAutoClient['createMessage'] = (x) => this._auto.createMessage(x)\n  public readonly getMessage: IAutoClient['getMessage'] = (x) => this._auto.getMessage(x)\n  public readonly getOrCreateMessage: IAutoClient['getOrCreateMessage'] = (x) => this._auto.getOrCreateMessage(x)\n  public readonly updateMessage: IAutoClient['updateMessage'] = (x) => this._auto.updateMessage(x)\n  public readonly deleteMessage: IAutoClient['deleteMessage'] = (x) => this._auto.deleteMessage(x)\n  public readonly createUser: IAutoClient['createUser'] = (x) => this._auto.createUser(x)\n  public readonly getUser: IAutoClient['getUser'] = (x) => this._auto.getUser(x)\n  public readonly updateUser: IAutoClient['updateUser'] = (x) => this._auto.updateUser(x)\n  public readonly deleteUser: IAutoClient['deleteUser'] = (x) => this._auto.deleteUser(x)\n\n  public readonly listenConversation = async ({ id, xChatKey }: ListenConversationArgs): Promise<SignalListener> => {\n    const signalListener = await SignalListener.listen({\n      url: this.props.apiUrl,\n      conversationId: id,\n      chatKey: xChatKey,\n    })\n    return signalListener\n  }\n\n  private static _createAxios = (props: ClientProps) => {\n    const headers: Headers = {\n      ...props.headers,\n    }\n    const timeout = props.timeout ?? defaultTimeout\n    const withCredentials = isBrowser\n    return axios.create({ headers, withCredentials, timeout, maxBodyLength, maxContentLength })\n  }\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n\nimport axios, { AxiosInstance } from 'axios'\nimport type { Merge, Except } from 'type-fest'\nimport {\n  DefaultApi,\n  Configuration,\n\tDefaultApiGetConversationRequest,\n\tDefaultApiCreateConversationRequest,\n\tDefaultApiGetOrCreateConversationRequest,\n\tDefaultApiUpdateConversationRequest,\n\tDefaultApiDeleteConversationRequest,\n\tDefaultApiListConversationsRequest,\n\tDefaultApiListenConversationRequest,\n\tDefaultApiListConversationMessagesRequest,\n\tDefaultApiAddParticipantRequest,\n\tDefaultApiRemoveParticipantRequest,\n\tDefaultApiGetParticipantRequest,\n\tDefaultApiListParticipantsRequest,\n\tDefaultApiGetMessageRequest,\n\tDefaultApiCreateMessageRequest,\n\tDefaultApiGetOrCreateMessageRequest,\n\tDefaultApiUpdateMessageRequest,\n\tDefaultApiDeleteMessageRequest,\n\tDefaultApiGetUserRequest,\n\tDefaultApiCreateUserRequest,\n\tDefaultApiUpdateUserRequest,\n\tDefaultApiDeleteUserRequest,\n} from '.'\nimport { errorFrom } from './errors'\n\nexport class ApiClient {\n  private _innerClient: DefaultApi\n  public constructor(configuration?: Configuration, basePath?: string, axiosInstance?: AxiosInstance) {\n    this._innerClient = new DefaultApi(configuration, basePath, axiosInstance)\n  }\n\tpublic getConversation = (props: GetConversationProps) => this._innerClient.getConversation(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createConversation = ({ xChatKey, ...createConversationBody }: CreateConversationProps) => this._innerClient.createConversation({ xChatKey, createConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateConversation = ({ xChatKey, ...getOrCreateConversationBody }: GetOrCreateConversationProps) => this._innerClient.getOrCreateConversation({ xChatKey, getOrCreateConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateConversation = ({ id, xChatKey, ...updateConversationBody }: UpdateConversationProps) => this._innerClient.updateConversation({ id, xChatKey, updateConversationBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteConversation = (props: DeleteConversationProps) => this._innerClient.deleteConversation(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listConversations = (props: ListConversationsProps) => this._innerClient.listConversations(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listenConversation = (props: ListenConversationProps) => this._innerClient.listenConversation(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listConversationMessages = (props: ListConversationMessagesProps) => this._innerClient.listConversationMessages(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic addParticipant = ({ id, xChatKey, ...addParticipantBody }: AddParticipantProps) => this._innerClient.addParticipant({ id, xChatKey, addParticipantBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic removeParticipant = (props: RemoveParticipantProps) => this._innerClient.removeParticipant(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getParticipant = (props: GetParticipantProps) => this._innerClient.getParticipant(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic listParticipants = (props: ListParticipantsProps) => this._innerClient.listParticipants(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getMessage = (props: GetMessageProps) => this._innerClient.getMessage(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createMessage = ({ xChatKey, ...createMessageBody }: CreateMessageProps) => this._innerClient.createMessage({ xChatKey, createMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getOrCreateMessage = ({ xChatKey, ...getOrCreateMessageBody }: GetOrCreateMessageProps) => this._innerClient.getOrCreateMessage({ xChatKey, getOrCreateMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateMessage = ({ id, xChatKey, ...updateMessageBody }: UpdateMessageProps) => this._innerClient.updateMessage({ id, xChatKey, updateMessageBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteMessage = (props: DeleteMessageProps) => this._innerClient.deleteMessage(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic getUser = (props: GetUserProps) => this._innerClient.getUser(props).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic createUser = (createUserBody: CreateUserProps) => this._innerClient.createUser({ createUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic updateUser = ({ xChatKey, ...updateUserBody }: UpdateUserProps) => this._innerClient.updateUser({ xChatKey, updateUserBody }).then((res) => res.data).catch((e) => { throw getError(e) })\n\tpublic deleteUser = (props: DeleteUserProps) => this._innerClient.deleteUser(props).then((res) => res.data).catch((e) => { throw getError(e) })\n}\n\nexport type GetConversationProps = Merge<DefaultApiGetConversationRequest, {}>\n\nexport type CreateConversationProps = Merge<\n  Except<DefaultApiCreateConversationRequest, 'createConversationBody'>,\n  NonNullable<DefaultApiCreateConversationRequest['createConversationBody']>\n>\n\nexport type GetOrCreateConversationProps = Merge<\n  Except<DefaultApiGetOrCreateConversationRequest, 'getOrCreateConversationBody'>,\n  NonNullable<DefaultApiGetOrCreateConversationRequest['getOrCreateConversationBody']>\n>\n\nexport type UpdateConversationProps = Merge<\n  Except<DefaultApiUpdateConversationRequest, 'updateConversationBody'>,\n  NonNullable<DefaultApiUpdateConversationRequest['updateConversationBody']>\n>\n\nexport type DeleteConversationProps = Merge<DefaultApiDeleteConversationRequest, {}>\n\nexport type ListConversationsProps = Merge<DefaultApiListConversationsRequest, {}>\n\nexport type ListenConversationProps = Merge<DefaultApiListenConversationRequest, {}>\n\nexport type ListConversationMessagesProps = Merge<DefaultApiListConversationMessagesRequest, {}>\n\nexport type AddParticipantProps = Merge<\n  Except<DefaultApiAddParticipantRequest, 'addParticipantBody'>,\n  NonNullable<DefaultApiAddParticipantRequest['addParticipantBody']>\n>\n\nexport type RemoveParticipantProps = Merge<DefaultApiRemoveParticipantRequest, {}>\n\nexport type GetParticipantProps = Merge<DefaultApiGetParticipantRequest, {}>\n\nexport type ListParticipantsProps = Merge<DefaultApiListParticipantsRequest, {}>\n\nexport type GetMessageProps = Merge<DefaultApiGetMessageRequest, {}>\n\nexport type CreateMessageProps = Merge<\n  Except<DefaultApiCreateMessageRequest, 'createMessageBody'>,\n  NonNullable<DefaultApiCreateMessageRequest['createMessageBody']>\n>\n\nexport type GetOrCreateMessageProps = Merge<\n  Except<DefaultApiGetOrCreateMessageRequest, 'getOrCreateMessageBody'>,\n  NonNullable<DefaultApiGetOrCreateMessageRequest['getOrCreateMessageBody']>\n>\n\nexport type UpdateMessageProps = Merge<\n  Except<DefaultApiUpdateMessageRequest, 'updateMessageBody'>,\n  NonNullable<DefaultApiUpdateMessageRequest['updateMessageBody']>\n>\n\nexport type DeleteMessageProps = Merge<DefaultApiDeleteMessageRequest, {}>\n\nexport type GetUserProps = Merge<DefaultApiGetUserRequest, {}>\n\nexport type CreateUserProps = Merge<\n  Except<DefaultApiCreateUserRequest, 'createUserBody'>,\n  NonNullable<DefaultApiCreateUserRequest['createUserBody']>\n>\n\nexport type UpdateUserProps = Merge<\n  Except<DefaultApiUpdateUserRequest, 'updateUserBody'>,\n  NonNullable<DefaultApiUpdateUserRequest['updateUserBody']>\n>\n\nexport type DeleteUserProps = Merge<DefaultApiDeleteUserRequest, {}>\n\n\nfunction getError(err: Error) {\n  if (axios.isAxiosError(err) && err.response?.data) {\n    return errorFrom(err.response.data)\n  }\n  return errorFrom(err)\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Chat API\n * API for the Chat Integration\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// URLSearchParams not necessarily used\n// @ts-ignore\n\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AddParticipantBody\n */\nexport interface AddParticipantBody {\n    /**\n     * User id\n     * @type {string}\n     * @memberof AddParticipantBody\n     */\n    'userId': string;\n}\n/**\n * \n * @export\n * @interface AddParticipantResponse\n */\nexport interface AddParticipantResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof AddParticipantResponse\n     */\n    'participant': User;\n}\n/**\n * Schema of the remotly generated chat key.\n * @export\n * @interface ChatKey\n */\nexport interface ChatKey {\n    /**\n     * Name of the [User](#schema_user)\n     * @type {string}\n     * @memberof ChatKey\n     */\n    'name'?: string;\n    /**\n     * Picture url of the [User](#schema_user)\n     * @type {string}\n     * @memberof ChatKey\n     */\n    'pictureUrl'?: string;\n    /**\n     * Custom profile data of the [User](#schema_user) encoded as a string\n     * @type {string}\n     * @memberof ChatKey\n     */\n    'profile'?: string;\n    /**\n     * Foreign identifier of the [User](#schema_user) in an external system\n     * @type {string}\n     * @memberof ChatKey\n     */\n    'fid': string;\n}\n/**\n * \n * @export\n * @interface Conversation\n */\nexport interface Conversation {\n    /**\n     * Id of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Conversation\n     */\n    'id': string;\n    /**\n     * Foreign identifier of the [Conversation](#schema_conversation) in an external system\n     * @type {string}\n     * @memberof Conversation\n     */\n    'fid'?: string;\n    /**\n     * Creation date of the [Conversation](#schema_conversation) in ISO 8601 format\n     * @type {string}\n     * @memberof Conversation\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Conversation](#schema_conversation) in ISO 8601 format\n     * @type {string}\n     * @memberof Conversation\n     */\n    'updatedAt': string;\n}\n/**\n * \n * @export\n * @interface CreateConversationBody\n */\nexport interface CreateConversationBody {\n    /**\n     * Foreign identifier of the [Conversation](#schema_conversation) in an external system\n     * @type {string}\n     * @memberof CreateConversationBody\n     */\n    'fid'?: string;\n}\n/**\n * \n * @export\n * @interface CreateConversationResponse\n */\nexport interface CreateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof CreateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface CreateMessageBody\n */\nexport interface CreateMessageBody {\n    /**\n     * \n     * @type {CreateMessageBodyPayload}\n     * @memberof CreateMessageBody\n     */\n    'payload': CreateMessageBodyPayload;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'conversationId': string;\n    /**\n     * Foreign identifier of the [Message](#schema_message) in an external system\n     * @type {string}\n     * @memberof CreateMessageBody\n     */\n    'fid'?: string;\n}\n/**\n * @type CreateMessageBodyPayload\n * Payload is the content type of the message.\n * @export\n */\nexport type CreateMessageBodyPayload = CreateMessageBodyPayloadOneOf | CreateMessageBodyPayloadOneOf1 | CreateMessageBodyPayloadOneOf2 | CreateMessageBodyPayloadOneOf3 | CreateMessageBodyPayloadOneOf4 | CreateMessageBodyPayloadOneOf5 | CreateMessageBodyPayloadOneOf6 | CreateMessageBodyPayloadOneOf7;\n\n/**\n * \n * @export\n * @interface CreateMessageBodyPayloadOneOf\n */\nexport interface CreateMessageBodyPayloadOneOf {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf\n     */\n    'type': CreateMessageBodyPayloadOneOfTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf\n     */\n    'variant': CreateMessageBodyPayloadOneOfVariantEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreateMessageBodyPayloadOneOf\n     */\n    'reusable'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf\n     */\n    'groupId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf\n     */\n    'text': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf\n     */\n    'buttonValue': string;\n}\n\nexport const CreateMessageBodyPayloadOneOfTypeEnum = {\n    Button: 'button'\n} as const;\n\nexport type CreateMessageBodyPayloadOneOfTypeEnum = typeof CreateMessageBodyPayloadOneOfTypeEnum[keyof typeof CreateMessageBodyPayloadOneOfTypeEnum];\nexport const CreateMessageBodyPayloadOneOfVariantEnum = {\n    Action: 'action',\n    Link: 'link'\n} as const;\n\nexport type CreateMessageBodyPayloadOneOfVariantEnum = typeof CreateMessageBodyPayloadOneOfVariantEnum[keyof typeof CreateMessageBodyPayloadOneOfVariantEnum];\n\n/**\n * \n * @export\n * @interface CreateMessageBodyPayloadOneOf1\n */\nexport interface CreateMessageBodyPayloadOneOf1 {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf1\n     */\n    'type': CreateMessageBodyPayloadOneOf1TypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf1\n     */\n    'text': string;\n}\n\nexport const CreateMessageBodyPayloadOneOf1TypeEnum = {\n    Text: 'text'\n} as const;\n\nexport type CreateMessageBodyPayloadOneOf1TypeEnum = typeof CreateMessageBodyPayloadOneOf1TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf1TypeEnum];\n\n/**\n * \n * @export\n * @interface CreateMessageBodyPayloadOneOf2\n */\nexport interface CreateMessageBodyPayloadOneOf2 {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf2\n     */\n    'type': CreateMessageBodyPayloadOneOf2TypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf2\n     */\n    'orientation'?: CreateMessageBodyPayloadOneOf2OrientationEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf2\n     */\n    'url': string;\n}\n\nexport const CreateMessageBodyPayloadOneOf2TypeEnum = {\n    Image: 'image'\n} as const;\n\nexport type CreateMessageBodyPayloadOneOf2TypeEnum = typeof CreateMessageBodyPayloadOneOf2TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf2TypeEnum];\nexport const CreateMessageBodyPayloadOneOf2OrientationEnum = {\n    Portrait: 'portrait',\n    Landscape: 'landscape',\n    Square: 'square',\n    Auto: 'auto'\n} as const;\n\nexport type CreateMessageBodyPayloadOneOf2OrientationEnum = typeof CreateMessageBodyPayloadOneOf2OrientationEnum[keyof typeof CreateMessageBodyPayloadOneOf2OrientationEnum];\n\n/**\n * \n * @export\n * @interface CreateMessageBodyPayloadOneOf3\n */\nexport interface CreateMessageBodyPayloadOneOf3 {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf3\n     */\n    'type': CreateMessageBodyPayloadOneOf3TypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf3\n     */\n    'url': string;\n}\n\nexport const CreateMessageBodyPayloadOneOf3TypeEnum = {\n    Audio: 'audio'\n} as const;\n\nexport type CreateMessageBodyPayloadOneOf3TypeEnum = typeof CreateMessageBodyPayloadOneOf3TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf3TypeEnum];\n\n/**\n * \n * @export\n * @interface CreateMessageBodyPayloadOneOf4\n */\nexport interface CreateMessageBodyPayloadOneOf4 {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf4\n     */\n    'type': CreateMessageBodyPayloadOneOf4TypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf4\n     */\n    'url': string;\n}\n\nexport const CreateMessageBodyPayloadOneOf4TypeEnum = {\n    Video: 'video'\n} as const;\n\nexport type CreateMessageBodyPayloadOneOf4TypeEnum = typeof CreateMessageBodyPayloadOneOf4TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf4TypeEnum];\n\n/**\n * \n * @export\n * @interface CreateMessageBodyPayloadOneOf5\n */\nexport interface CreateMessageBodyPayloadOneOf5 {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf5\n     */\n    'type': CreateMessageBodyPayloadOneOf5TypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf5\n     */\n    'url': string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf5\n     */\n    'title'?: string;\n}\n\nexport const CreateMessageBodyPayloadOneOf5TypeEnum = {\n    File: 'file'\n} as const;\n\nexport type CreateMessageBodyPayloadOneOf5TypeEnum = typeof CreateMessageBodyPayloadOneOf5TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf5TypeEnum];\n\n/**\n * \n * @export\n * @interface CreateMessageBodyPayloadOneOf6\n */\nexport interface CreateMessageBodyPayloadOneOf6 {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf6\n     */\n    'type': CreateMessageBodyPayloadOneOf6TypeEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateMessageBodyPayloadOneOf6\n     */\n    'latitude': number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateMessageBodyPayloadOneOf6\n     */\n    'longitude': number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf6\n     */\n    'title'?: string;\n}\n\nexport const CreateMessageBodyPayloadOneOf6TypeEnum = {\n    Location: 'location'\n} as const;\n\nexport type CreateMessageBodyPayloadOneOf6TypeEnum = typeof CreateMessageBodyPayloadOneOf6TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf6TypeEnum];\n\n/**\n * \n * @export\n * @interface CreateMessageBodyPayloadOneOf7\n */\nexport interface CreateMessageBodyPayloadOneOf7 {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyPayloadOneOf7\n     */\n    'type': CreateMessageBodyPayloadOneOf7TypeEnum;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CreateMessageBodyPayloadOneOf7\n     */\n    'payload': { [key: string]: any; };\n}\n\nexport const CreateMessageBodyPayloadOneOf7TypeEnum = {\n    Custom: 'custom'\n} as const;\n\nexport type CreateMessageBodyPayloadOneOf7TypeEnum = typeof CreateMessageBodyPayloadOneOf7TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf7TypeEnum];\n\n/**\n * \n * @export\n * @interface CreateMessageResponse\n */\nexport interface CreateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof CreateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface CreateUserBody\n */\nexport interface CreateUserBody {\n    /**\n     * Foreign identifier of the [User](#schema_user) in an external system\n     * @type {string}\n     * @memberof CreateUserBody\n     */\n    'fid'?: string;\n    /**\n     * Name of the [User](#schema_user) (not a unique identifier)\n     * @type {string}\n     * @memberof CreateUserBody\n     */\n    'name'?: string;\n    /**\n     * Picture url of the [User](#schema_user)\n     * @type {string}\n     * @memberof CreateUserBody\n     */\n    'pictureUrl'?: string;\n    /**\n     * Custom profile data of the [User](#schema_user) encoded as a string\n     * @type {string}\n     * @memberof CreateUserBody\n     */\n    'profile'?: string;\n}\n/**\n * \n * @export\n * @interface CreateUserResponse\n */\nexport interface CreateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof CreateUserResponse\n     */\n    'user': User;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateUserResponse\n     */\n    'key': string;\n}\n/**\n * \n * @export\n * @interface GetConversationResponse\n */\nexport interface GetConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof GetConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface GetMessageResponse\n */\nexport interface GetMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof GetMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface GetOrCreateConversationBody\n */\nexport interface GetOrCreateConversationBody {\n    /**\n     * Foreign identifier of the [Conversation](#schema_conversation) in an external system\n     * @type {string}\n     * @memberof GetOrCreateConversationBody\n     */\n    'fid': string;\n}\n/**\n * \n * @export\n * @interface GetOrCreateConversationResponse\n */\nexport interface GetOrCreateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof GetOrCreateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface GetOrCreateMessageBody\n */\nexport interface GetOrCreateMessageBody {\n    /**\n     * \n     * @type {CreateMessageBodyPayload}\n     * @memberof GetOrCreateMessageBody\n     */\n    'payload': CreateMessageBodyPayload;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'conversationId': string;\n    /**\n     * Foreign identifier of the [Message](#schema_message) in an external system\n     * @type {string}\n     * @memberof GetOrCreateMessageBody\n     */\n    'fid': string;\n}\n/**\n * \n * @export\n * @interface GetOrCreateMessageResponse\n */\nexport interface GetOrCreateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof GetOrCreateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface GetParticipantResponse\n */\nexport interface GetParticipantResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof GetParticipantResponse\n     */\n    'participant': User;\n}\n/**\n * \n * @export\n * @interface GetUserResponse\n */\nexport interface GetUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof GetUserResponse\n     */\n    'user': User;\n}\n/**\n * \n * @export\n * @interface ListConversationMessagesResponse\n */\nexport interface ListConversationMessagesResponse {\n    /**\n     * \n     * @type {Array<Message>}\n     * @memberof ListConversationMessagesResponse\n     */\n    'messages': Array<Message>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListConversationMessagesResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListConversationsResponse\n */\nexport interface ListConversationsResponse {\n    /**\n     * \n     * @type {Array<ListConversationsResponseConversationsInner>}\n     * @memberof ListConversationsResponse\n     */\n    'conversations': Array<ListConversationsResponseConversationsInner>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListConversationsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * \n * @export\n * @interface ListConversationsResponseConversationsInner\n */\nexport interface ListConversationsResponseConversationsInner {\n    /**\n     * Id of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof ListConversationsResponseConversationsInner\n     */\n    'id': string;\n    /**\n     * Foreign identifier of the [Conversation](#schema_conversation) in an external system\n     * @type {string}\n     * @memberof ListConversationsResponseConversationsInner\n     */\n    'fid'?: string;\n    /**\n     * Creation date of the [Conversation](#schema_conversation) in ISO 8601 format\n     * @type {string}\n     * @memberof ListConversationsResponseConversationsInner\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [Conversation](#schema_conversation) in ISO 8601 format\n     * @type {string}\n     * @memberof ListConversationsResponseConversationsInner\n     */\n    'updatedAt': string;\n}\n/**\n * \n * @export\n * @interface ListConversationsResponseMeta\n */\nexport interface ListConversationsResponseMeta {\n    /**\n     * The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint.\n     * @type {string}\n     * @memberof ListConversationsResponseMeta\n     */\n    'nextToken'?: string;\n}\n/**\n * \n * @export\n * @interface ListParticipantsResponse\n */\nexport interface ListParticipantsResponse {\n    /**\n     * \n     * @type {Array<User>}\n     * @memberof ListParticipantsResponse\n     */\n    'participants': Array<User>;\n    /**\n     * \n     * @type {ListConversationsResponseMeta}\n     * @memberof ListParticipantsResponse\n     */\n    'meta': ListConversationsResponseMeta;\n}\n/**\n * The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).\n * @export\n * @interface Message\n */\nexport interface Message {\n    /**\n     * Id of the [Message](#schema_message)\n     * @type {string}\n     * @memberof Message\n     */\n    'id': string;\n    /**\n     * Foreign identifier of the [Message](#schema_message) in an external system\n     * @type {string}\n     * @memberof Message\n     */\n    'fid'?: string;\n    /**\n     * Creation date of the [Message](#schema_message) in ISO 8601 format\n     * @type {string}\n     * @memberof Message\n     */\n    'createdAt': string;\n    /**\n     * Type of the [Message](#schema_message) represents the resource type that the message is related to\n     * @type {string}\n     * @memberof Message\n     */\n    'type': string;\n    /**\n     * \n     * @type {CreateMessageBodyPayload}\n     * @memberof Message\n     */\n    'payload': CreateMessageBodyPayload;\n    /**\n     * ID of the [User](#schema_user)\n     * @type {string}\n     * @memberof Message\n     */\n    'userId': string;\n    /**\n     * ID of the [Conversation](#schema_conversation)\n     * @type {string}\n     * @memberof Message\n     */\n    'conversationId': string;\n}\n/**\n * \n * @export\n * @interface UpdateConversationBody\n */\nexport interface UpdateConversationBody {\n    /**\n     * Foreign identifier of the [Conversation](#schema_conversation) in an external system\n     * @type {string}\n     * @memberof UpdateConversationBody\n     */\n    'fid'?: string;\n}\n/**\n * \n * @export\n * @interface UpdateConversationResponse\n */\nexport interface UpdateConversationResponse {\n    /**\n     * \n     * @type {Conversation}\n     * @memberof UpdateConversationResponse\n     */\n    'conversation': Conversation;\n}\n/**\n * \n * @export\n * @interface UpdateMessageBody\n */\nexport interface UpdateMessageBody {\n    /**\n     * Foreign identifier of the [Message](#schema_message) in an external system\n     * @type {string}\n     * @memberof UpdateMessageBody\n     */\n    'fid'?: string;\n}\n/**\n * \n * @export\n * @interface UpdateMessageResponse\n */\nexport interface UpdateMessageResponse {\n    /**\n     * \n     * @type {Message}\n     * @memberof UpdateMessageResponse\n     */\n    'message': Message;\n}\n/**\n * \n * @export\n * @interface UpdateUserBody\n */\nexport interface UpdateUserBody {\n    /**\n     * Foreign identifier of the [User](#schema_user) in an external system\n     * @type {string}\n     * @memberof UpdateUserBody\n     */\n    'fid'?: string;\n    /**\n     * Name of the [User](#schema_user) (not a unique identifier)\n     * @type {string}\n     * @memberof UpdateUserBody\n     */\n    'name'?: string;\n    /**\n     * Picture url of the [User](#schema_user)\n     * @type {string}\n     * @memberof UpdateUserBody\n     */\n    'pictureUrl'?: string;\n    /**\n     * Custom profile data of the [User](#schema_user) encoded as a string\n     * @type {string}\n     * @memberof UpdateUserBody\n     */\n    'profile'?: string;\n}\n/**\n * \n * @export\n * @interface UpdateUserResponse\n */\nexport interface UpdateUserResponse {\n    /**\n     * \n     * @type {User}\n     * @memberof UpdateUserResponse\n     */\n    'user': User;\n}\n/**\n * The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.\n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * Name of the [User](#schema_user)\n     * @type {string}\n     * @memberof User\n     */\n    'name'?: string;\n    /**\n     * Picture url of the [User](#schema_user)\n     * @type {string}\n     * @memberof User\n     */\n    'pictureUrl'?: string;\n    /**\n     * Custom profile data of the [User](#schema_user) encoded as a string\n     * @type {string}\n     * @memberof User\n     */\n    'profile'?: string;\n    /**\n     * Id of the [User](#schema_user)\n     * @type {string}\n     * @memberof User\n     */\n    'id': string;\n    /**\n     * Foreign identifier of the [User](#schema_user) in an external system\n     * @type {string}\n     * @memberof User\n     */\n    'fid'?: string;\n    /**\n     * Creation date of the [User](#schema_user) in ISO 8601 format\n     * @type {string}\n     * @memberof User\n     */\n    'createdAt': string;\n    /**\n     * Updating date of the [User](#schema_user) in ISO 8601 format\n     * @type {string}\n     * @memberof User\n     */\n    'updatedAt': string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Add a [Participant](#schema_user) to a [Conversation](#schema_conversation).\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {AddParticipantBody} [addParticipantBody] Participant data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addParticipant: async (xChatKey: string, id: string, addParticipantBody?: AddParticipantBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('addParticipant', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('addParticipant', 'id', id)\n            const localVarPath = `/v1/conversations/{id}/participants`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(addParticipantBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation)\n         * @param {string} xChatKey Authentication Key\n         * @param {CreateConversationBody} [createConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConversation: async (xChatKey: string, createConversationBody?: CreateConversationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('createConversation', 'xChatKey', xChatKey)\n            const localVarPath = `/v1/conversations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Message](#schema_message)\n         * @param {string} xChatKey Authentication Key\n         * @param {CreateMessageBody} [createMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMessage: async (xChatKey: string, createMessageBody?: CreateMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('createMessage', 'xChatKey', xChatKey)\n            const localVarPath = `/v1/messages`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [User](#schema_user)\n         * @param {CreateUserBody} [createUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser: async (createUserBody?: CreateUserBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/users`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConversation: async (xChatKey: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('deleteConversation', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteConversation', 'id', id)\n            const localVarPath = `/v1/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Message id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMessage: async (xChatKey: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('deleteMessage', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteMessage', 'id', id)\n            const localVarPath = `/v1/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {string} xChatKey Authentication Key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser: async (xChatKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('deleteUser', 'xChatKey', xChatKey)\n            const localVarPath = `/v1/users/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConversation: async (xChatKey: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('getConversation', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getConversation', 'id', id)\n            const localVarPath = `/v1/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Id of the Message\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMessage: async (xChatKey: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('getMessage', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMessage', 'id', id)\n            const localVarPath = `/v1/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation) if it does not exist yet, otherwise returns the existing one\n         * @param {string} xChatKey Authentication Key\n         * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateConversation: async (xChatKey: string, getOrCreateConversationBody?: GetOrCreateConversationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('getOrCreateConversation', 'xChatKey', xChatKey)\n            const localVarPath = `/v1/conversations/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Message](#schema_message) if it does not exist yet, otherwise returns the existing one\n         * @param {string} xChatKey Authentication Key\n         * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateMessage: async (xChatKey: string, getOrCreateMessageBody?: GetOrCreateMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('getOrCreateMessage', 'xChatKey', xChatKey)\n            const localVarPath = `/v1/messages/get-or-create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(getOrCreateMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a [Participant](#schema_user) from a [Conversation](#schema_conversation).\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getParticipant: async (xChatKey: string, id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('getParticipant', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getParticipant', 'id', id)\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('getParticipant', 'userId', userId)\n            const localVarPath = `/v1/conversations/{id}/participants/{userId}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {string} xChatKey Authentication Key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser: async (xChatKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('getUser', 'xChatKey', xChatKey)\n            const localVarPath = `/v1/users/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves the conversation\\'s [Messages](#schema_message)\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConversationMessages: async (xChatKey: string, id: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('listConversationMessages', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listConversationMessages', 'id', id)\n            const localVarPath = `/v1/conversations/{id}/messages`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a list of [Conversation](#schema_conversation) objects\n         * @param {string} xChatKey Authentication Key\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConversations: async (xChatKey: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('listConversations', 'xChatKey', xChatKey)\n            const localVarPath = `/v1/conversations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieves a list of [Participants](#schema_user) for a given [Conversation](#schema_conversation).\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listParticipants: async (xChatKey: string, id: string, nextToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('listParticipants', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listParticipants', 'id', id)\n            const localVarPath = `/v1/conversations/{id}/participants`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (nextToken !== undefined) {\n                localVarQueryParameter['nextToken'] = nextToken;\n            }\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a SSE stream to receive messages and events from a conversation\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listenConversation: async (xChatKey: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('listenConversation', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listenConversation', 'id', id)\n            const localVarPath = `/v1/conversations/{id}/listen`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Remove a [Participant](#schema_user) from a [Conversation](#schema_conversation).\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeParticipant: async (xChatKey: string, id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('removeParticipant', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('removeParticipant', 'id', id)\n            // verify required parameter 'userId' is not null or undefined\n            assertParamExists('removeParticipant', 'userId', userId)\n            const localVarPath = `/v1/conversations/{id}/participants/{userId}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation)\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {UpdateConversationBody} [updateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateConversation: async (xChatKey: string, id: string, updateConversationBody?: UpdateConversationBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('updateConversation', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateConversation', 'id', id)\n            const localVarPath = `/v1/conversations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateConversationBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update a [Message](#schema_message)\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Message id\n         * @param {UpdateMessageBody} [updateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMessage: async (xChatKey: string, id: string, updateMessageBody?: UpdateMessageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('updateMessage', 'xChatKey', xChatKey)\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('updateMessage', 'id', id)\n            const localVarPath = `/v1/messages/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateMessageBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Update [User](#schema_user)\n         * @param {string} xChatKey Authentication Key\n         * @param {UpdateUserBody} [updateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser: async (xChatKey: string, updateUserBody?: UpdateUserBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'xChatKey' is not null or undefined\n            assertParamExists('updateUser', 'xChatKey', xChatKey)\n            const localVarPath = `/v1/users/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (xChatKey != null) {\n                localVarHeaderParameter['x-chat-key'] = String(xChatKey);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateUserBody, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Add a [Participant](#schema_user) to a [Conversation](#schema_conversation).\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {AddParticipantBody} [addParticipantBody] Participant data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addParticipant(xChatKey: string, id: string, addParticipantBody?: AddParticipantBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddParticipantResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addParticipant(xChatKey, id, addParticipantBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation)\n         * @param {string} xChatKey Authentication Key\n         * @param {CreateConversationBody} [createConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createConversation(xChatKey: string, createConversationBody?: CreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createConversation(xChatKey, createConversationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Message](#schema_message)\n         * @param {string} xChatKey Authentication Key\n         * @param {CreateMessageBody} [createMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createMessage(xChatKey: string, createMessageBody?: CreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessage(xChatKey, createMessageBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [User](#schema_user)\n         * @param {CreateUserBody} [createUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createUser(createUserBody?: CreateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteConversation(xChatKey: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConversation(xChatKey, id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Message id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteMessage(xChatKey: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessage(xChatKey, id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {string} xChatKey Authentication Key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteUser(xChatKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(xChatKey, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getConversation(xChatKey: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversation(xChatKey, id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Id of the Message\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMessage(xChatKey: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessage(xChatKey, id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation) if it does not exist yet, otherwise returns the existing one\n         * @param {string} xChatKey Authentication Key\n         * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateConversation(xChatKey: string, getOrCreateConversationBody?: GetOrCreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateConversation(xChatKey, getOrCreateConversationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Message](#schema_message) if it does not exist yet, otherwise returns the existing one\n         * @param {string} xChatKey Authentication Key\n         * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrCreateMessage(xChatKey: string, getOrCreateMessageBody?: GetOrCreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrCreateMessage(xChatKey, getOrCreateMessageBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a [Participant](#schema_user) from a [Conversation](#schema_conversation).\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getParticipant(xChatKey: string, id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetParticipantResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipant(xChatKey, id, userId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {string} xChatKey Authentication Key\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUser(xChatKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(xChatKey, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves the conversation\\'s [Messages](#schema_message)\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listConversationMessages(xChatKey: string, id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListConversationMessagesResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listConversationMessages(xChatKey, id, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a list of [Conversation](#schema_conversation) objects\n         * @param {string} xChatKey Authentication Key\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listConversations(xChatKey: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListConversationsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listConversations(xChatKey, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieves a list of [Participants](#schema_user) for a given [Conversation](#schema_conversation).\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listParticipants(xChatKey: string, id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListParticipantsResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listParticipants(xChatKey, id, nextToken, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a SSE stream to receive messages and events from a conversation\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listenConversation(xChatKey: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listenConversation(xChatKey, id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Remove a [Participant](#schema_user) from a [Conversation](#schema_conversation).\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {string} userId User id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async removeParticipant(xChatKey: string, id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.removeParticipant(xChatKey, id, userId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation)\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Conversation id\n         * @param {UpdateConversationBody} [updateConversationBody] Conversation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateConversation(xChatKey: string, id: string, updateConversationBody?: UpdateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateConversationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConversation(xChatKey, id, updateConversationBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update a [Message](#schema_message)\n         * @param {string} xChatKey Authentication Key\n         * @param {string} id Message id\n         * @param {UpdateMessageBody} [updateMessageBody] Message data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateMessage(xChatKey: string, id: string, updateMessageBody?: UpdateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMessageResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessage(xChatKey, id, updateMessageBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Update [User](#schema_user)\n         * @param {string} xChatKey Authentication Key\n         * @param {UpdateUserBody} [updateUserBody] User data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUser(xChatKey: string, updateUserBody?: UpdateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(xChatKey, updateUserBody, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * Add a [Participant](#schema_user) to a [Conversation](#schema_conversation).\n         * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<AddParticipantResponse> {\n            return localVarFp.addParticipant(requestParameters.xChatKey, requestParameters.id, requestParameters.addParticipantBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation)\n         * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createConversation(requestParameters: DefaultApiCreateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<CreateConversationResponse> {\n            return localVarFp.createConversation(requestParameters.xChatKey, requestParameters.createConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Message](#schema_message)\n         * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createMessage(requestParameters: DefaultApiCreateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<CreateMessageResponse> {\n            return localVarFp.createMessage(requestParameters.xChatKey, requestParameters.createMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [User](#schema_user)\n         * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(requestParameters: DefaultApiCreateUserRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateUserResponse> {\n            return localVarFp.createUser(requestParameters.createUserBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n         * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteConversation(requestParameters.xChatKey, requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [Message](#schema_message). It cannot be undone.\n         * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteMessage(requestParameters.xChatKey, requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Permanently deletes a [User](#schema_user). It cannot be undone.\n         * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.deleteUser(requestParameters.xChatKey, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n         * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig): AxiosPromise<GetConversationResponse> {\n            return localVarFp.getConversation(requestParameters.xChatKey, requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [Message](#schema_message) object for a valid identifier.\n         * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig): AxiosPromise<GetMessageResponse> {\n            return localVarFp.getMessage(requestParameters.xChatKey, requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation) if it does not exist yet, otherwise returns the existing one\n         * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateConversation(requestParameters: DefaultApiGetOrCreateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateConversationResponse> {\n            return localVarFp.getOrCreateConversation(requestParameters.xChatKey, requestParameters.getOrCreateConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Message](#schema_message) if it does not exist yet, otherwise returns the existing one\n         * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrCreateMessage(requestParameters: DefaultApiGetOrCreateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateMessageResponse> {\n            return localVarFp.getOrCreateMessage(requestParameters.xChatKey, requestParameters.getOrCreateMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a [Participant](#schema_user) from a [Conversation](#schema_conversation).\n         * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<GetParticipantResponse> {\n            return localVarFp.getParticipant(requestParameters.xChatKey, requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the [User](#schema_user) object for a valid identifier.\n         * @param {DefaultApiGetUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserResponse> {\n            return localVarFp.getUser(requestParameters.xChatKey, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves the conversation\\'s [Messages](#schema_message)\n         * @param {DefaultApiListConversationMessagesRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConversationMessages(requestParameters: DefaultApiListConversationMessagesRequest, options?: AxiosRequestConfig): AxiosPromise<ListConversationMessagesResponse> {\n            return localVarFp.listConversationMessages(requestParameters.xChatKey, requestParameters.id, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a list of [Conversation](#schema_conversation) objects\n         * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listConversations(requestParameters: DefaultApiListConversationsRequest, options?: AxiosRequestConfig): AxiosPromise<ListConversationsResponse> {\n            return localVarFp.listConversations(requestParameters.xChatKey, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieves a list of [Participants](#schema_user) for a given [Conversation](#schema_conversation).\n         * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig): AxiosPromise<ListParticipantsResponse> {\n            return localVarFp.listParticipants(requestParameters.xChatKey, requestParameters.id, requestParameters.nextToken, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a SSE stream to receive messages and events from a conversation\n         * @param {DefaultApiListenConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listenConversation(requestParameters: DefaultApiListenConversationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.listenConversation(requestParameters.xChatKey, requestParameters.id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Remove a [Participant](#schema_user) from a [Conversation](#schema_conversation).\n         * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<object> {\n            return localVarFp.removeParticipant(requestParameters.xChatKey, requestParameters.id, requestParameters.userId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Creates a new [Conversation](#schema_conversation)\n         * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateConversationResponse> {\n            return localVarFp.updateConversation(requestParameters.xChatKey, requestParameters.id, requestParameters.updateConversationBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update a [Message](#schema_message)\n         * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateMessageResponse> {\n            return localVarFp.updateMessage(requestParameters.xChatKey, requestParameters.id, requestParameters.updateMessageBody, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Update [User](#schema_user)\n         * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateUserResponse> {\n            return localVarFp.updateUser(requestParameters.xChatKey, requestParameters.updateUserBody, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * Request parameters for addParticipant operation in DefaultApi.\n * @export\n * @interface DefaultApiAddParticipantRequest\n */\nexport interface DefaultApiAddParticipantRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiAddParticipant\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiAddParticipant\n     */\n    readonly id: string\n\n    /**\n     * Participant data\n     * @type {AddParticipantBody}\n     * @memberof DefaultApiAddParticipant\n     */\n    readonly addParticipantBody?: AddParticipantBody\n}\n\n/**\n * Request parameters for createConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateConversationRequest\n */\nexport interface DefaultApiCreateConversationRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiCreateConversation\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation data\n     * @type {CreateConversationBody}\n     * @memberof DefaultApiCreateConversation\n     */\n    readonly createConversationBody?: CreateConversationBody\n}\n\n/**\n * Request parameters for createMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateMessageRequest\n */\nexport interface DefaultApiCreateMessageRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiCreateMessage\n     */\n    readonly xChatKey: string\n\n    /**\n     * Message data\n     * @type {CreateMessageBody}\n     * @memberof DefaultApiCreateMessage\n     */\n    readonly createMessageBody?: CreateMessageBody\n}\n\n/**\n * Request parameters for createUser operation in DefaultApi.\n * @export\n * @interface DefaultApiCreateUserRequest\n */\nexport interface DefaultApiCreateUserRequest {\n    /**\n     * User data\n     * @type {CreateUserBody}\n     * @memberof DefaultApiCreateUser\n     */\n    readonly createUserBody?: CreateUserBody\n}\n\n/**\n * Request parameters for deleteConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteConversationRequest\n */\nexport interface DefaultApiDeleteConversationRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiDeleteConversation\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiDeleteConversation\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteMessageRequest\n */\nexport interface DefaultApiDeleteMessageRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiDeleteMessage\n     */\n    readonly xChatKey: string\n\n    /**\n     * Message id\n     * @type {string}\n     * @memberof DefaultApiDeleteMessage\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for deleteUser operation in DefaultApi.\n * @export\n * @interface DefaultApiDeleteUserRequest\n */\nexport interface DefaultApiDeleteUserRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiDeleteUser\n     */\n    readonly xChatKey: string\n}\n\n/**\n * Request parameters for getConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiGetConversationRequest\n */\nexport interface DefaultApiGetConversationRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiGetConversation\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiGetConversation\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiGetMessageRequest\n */\nexport interface DefaultApiGetMessageRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiGetMessage\n     */\n    readonly xChatKey: string\n\n    /**\n     * Id of the Message\n     * @type {string}\n     * @memberof DefaultApiGetMessage\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for getOrCreateConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateConversationRequest\n */\nexport interface DefaultApiGetOrCreateConversationRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiGetOrCreateConversation\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation data\n     * @type {GetOrCreateConversationBody}\n     * @memberof DefaultApiGetOrCreateConversation\n     */\n    readonly getOrCreateConversationBody?: GetOrCreateConversationBody\n}\n\n/**\n * Request parameters for getOrCreateMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiGetOrCreateMessageRequest\n */\nexport interface DefaultApiGetOrCreateMessageRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiGetOrCreateMessage\n     */\n    readonly xChatKey: string\n\n    /**\n     * Message data\n     * @type {GetOrCreateMessageBody}\n     * @memberof DefaultApiGetOrCreateMessage\n     */\n    readonly getOrCreateMessageBody?: GetOrCreateMessageBody\n}\n\n/**\n * Request parameters for getParticipant operation in DefaultApi.\n * @export\n * @interface DefaultApiGetParticipantRequest\n */\nexport interface DefaultApiGetParticipantRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiGetParticipant\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiGetParticipant\n     */\n    readonly id: string\n\n    /**\n     * User id\n     * @type {string}\n     * @memberof DefaultApiGetParticipant\n     */\n    readonly userId: string\n}\n\n/**\n * Request parameters for getUser operation in DefaultApi.\n * @export\n * @interface DefaultApiGetUserRequest\n */\nexport interface DefaultApiGetUserRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiGetUser\n     */\n    readonly xChatKey: string\n}\n\n/**\n * Request parameters for listConversationMessages operation in DefaultApi.\n * @export\n * @interface DefaultApiListConversationMessagesRequest\n */\nexport interface DefaultApiListConversationMessagesRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiListConversationMessages\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiListConversationMessages\n     */\n    readonly id: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListConversationMessages\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listConversations operation in DefaultApi.\n * @export\n * @interface DefaultApiListConversationsRequest\n */\nexport interface DefaultApiListConversationsRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiListConversations\n     */\n    readonly xChatKey: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListConversations\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listParticipants operation in DefaultApi.\n * @export\n * @interface DefaultApiListParticipantsRequest\n */\nexport interface DefaultApiListParticipantsRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiListParticipants\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiListParticipants\n     */\n    readonly id: string\n\n    /**\n     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results\n     * @type {string}\n     * @memberof DefaultApiListParticipants\n     */\n    readonly nextToken?: string\n}\n\n/**\n * Request parameters for listenConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiListenConversationRequest\n */\nexport interface DefaultApiListenConversationRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiListenConversation\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiListenConversation\n     */\n    readonly id: string\n}\n\n/**\n * Request parameters for removeParticipant operation in DefaultApi.\n * @export\n * @interface DefaultApiRemoveParticipantRequest\n */\nexport interface DefaultApiRemoveParticipantRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiRemoveParticipant\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiRemoveParticipant\n     */\n    readonly id: string\n\n    /**\n     * User id\n     * @type {string}\n     * @memberof DefaultApiRemoveParticipant\n     */\n    readonly userId: string\n}\n\n/**\n * Request parameters for updateConversation operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateConversationRequest\n */\nexport interface DefaultApiUpdateConversationRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiUpdateConversation\n     */\n    readonly xChatKey: string\n\n    /**\n     * Conversation id\n     * @type {string}\n     * @memberof DefaultApiUpdateConversation\n     */\n    readonly id: string\n\n    /**\n     * Conversation data\n     * @type {UpdateConversationBody}\n     * @memberof DefaultApiUpdateConversation\n     */\n    readonly updateConversationBody?: UpdateConversationBody\n}\n\n/**\n * Request parameters for updateMessage operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateMessageRequest\n */\nexport interface DefaultApiUpdateMessageRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiUpdateMessage\n     */\n    readonly xChatKey: string\n\n    /**\n     * Message id\n     * @type {string}\n     * @memberof DefaultApiUpdateMessage\n     */\n    readonly id: string\n\n    /**\n     * Message data\n     * @type {UpdateMessageBody}\n     * @memberof DefaultApiUpdateMessage\n     */\n    readonly updateMessageBody?: UpdateMessageBody\n}\n\n/**\n * Request parameters for updateUser operation in DefaultApi.\n * @export\n * @interface DefaultApiUpdateUserRequest\n */\nexport interface DefaultApiUpdateUserRequest {\n    /**\n     * Authentication Key\n     * @type {string}\n     * @memberof DefaultApiUpdateUser\n     */\n    readonly xChatKey: string\n\n    /**\n     * User data\n     * @type {UpdateUserBody}\n     * @memberof DefaultApiUpdateUser\n     */\n    readonly updateUserBody?: UpdateUserBody\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Add a [Participant](#schema_user) to a [Conversation](#schema_conversation).\n     * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).addParticipant(requestParameters.xChatKey, requestParameters.id, requestParameters.addParticipantBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Conversation](#schema_conversation)\n     * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createConversation(requestParameters: DefaultApiCreateConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createConversation(requestParameters.xChatKey, requestParameters.createConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Message](#schema_message)\n     * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createMessage(requestParameters: DefaultApiCreateMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createMessage(requestParameters.xChatKey, requestParameters.createMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [User](#schema_user)\n     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createUser(requestParameters: DefaultApiCreateUserRequest = {}, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).createUser(requestParameters.createUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).\n     * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteConversation(requestParameters.xChatKey, requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [Message](#schema_message). It cannot be undone.\n     * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteMessage(requestParameters.xChatKey, requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Permanently deletes a [User](#schema_user). It cannot be undone.\n     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).deleteUser(requestParameters.xChatKey, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.\n     * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getConversation(requestParameters.xChatKey, requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [Message](#schema_message) object for a valid identifier.\n     * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getMessage(requestParameters.xChatKey, requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Conversation](#schema_conversation) if it does not exist yet, otherwise returns the existing one\n     * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateConversation(requestParameters: DefaultApiGetOrCreateConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateConversation(requestParameters.xChatKey, requestParameters.getOrCreateConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Message](#schema_message) if it does not exist yet, otherwise returns the existing one\n     * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOrCreateMessage(requestParameters: DefaultApiGetOrCreateMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getOrCreateMessage(requestParameters.xChatKey, requestParameters.getOrCreateMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a [Participant](#schema_user) from a [Conversation](#schema_conversation).\n     * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getParticipant(requestParameters.xChatKey, requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the [User](#schema_user) object for a valid identifier.\n     * @param {DefaultApiGetUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).getUser(requestParameters.xChatKey, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves the conversation\\'s [Messages](#schema_message)\n     * @param {DefaultApiListConversationMessagesRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listConversationMessages(requestParameters: DefaultApiListConversationMessagesRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listConversationMessages(requestParameters.xChatKey, requestParameters.id, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a list of [Conversation](#schema_conversation) objects\n     * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listConversations(requestParameters: DefaultApiListConversationsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listConversations(requestParameters.xChatKey, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieves a list of [Participants](#schema_user) for a given [Conversation](#schema_conversation).\n     * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listParticipants(requestParameters.xChatKey, requestParameters.id, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a SSE stream to receive messages and events from a conversation\n     * @param {DefaultApiListenConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listenConversation(requestParameters: DefaultApiListenConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).listenConversation(requestParameters.xChatKey, requestParameters.id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Remove a [Participant](#schema_user) from a [Conversation](#schema_conversation).\n     * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).removeParticipant(requestParameters.xChatKey, requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Creates a new [Conversation](#schema_conversation)\n     * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateConversation(requestParameters.xChatKey, requestParameters.id, requestParameters.updateConversationBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update a [Message](#schema_message)\n     * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateMessage(requestParameters.xChatKey, requestParameters.id, requestParameters.updateMessageBody, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Update [User](#schema_user)\n     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig) {\n        return DefaultApiFp(this.configuration).updateUser(requestParameters.xChatKey, requestParameters.updateUserBody, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Chat API\n * API for the Chat Integration\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"https://api.botpress.cloud/webhooks\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * Chat API\n * API for the Chat Integration\n *\n * The version of the OpenAPI document: 0.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n", "// This file was generated by the Opapi Generator\n/* eslint-disable */\n\n\nimport crypto from 'crypto'\n\nconst codes = {\n  HTTP_STATUS_BAD_REQUEST: 400,\n  HTTP_STATUS_UNAUTHORIZED: 401,\n  HTTP_STATUS_PAYMENT_REQUIRED: 402,\n  HTTP_STATUS_FORBIDDEN: 403,\n  HTTP_STATUS_NOT_FOUND: 404,\n  HTTP_STATUS_METHOD_NOT_ALLOWED: 405,\n  HTTP_STATUS_REQUEST_TIMEOUT: 408,\n  HTTP_STATUS_CONFLICT: 409,\n  HTTP_STATUS_PAYLOAD_TOO_LARGE: 413,\n  HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: 415,\n  HTTP_STATUS_TOO_MANY_REQUESTS: 429,\n  HTTP_STATUS_INTERNAL_SERVER_ERROR: 500,\n  HTTP_STATUS_NOT_IMPLEMENTED: 501,\n  HTTP_STATUS_BAD_GATEWAY: 502,\n  HTTP_STATUS_SERVICE_UNAVAILABLE: 503,\n  HTTP_STATUS_GATEWAY_TIMEOUT: 504,\n} as const\n\ntype ErrorCode = typeof codes[keyof typeof codes]\n\ndeclare const window: any\ntype CryptoLib = { getRandomValues(array: Uint8Array): Uint8Array }\n\nconst cryptoLibPolyfill: CryptoLib = {\n  // Fallback in case crypto isn't available.\n  getRandomValues: (array: Uint8Array) => new Uint8Array(array.map(() => Math.floor(Math.random() * 256))),\n}\n\nlet cryptoLib: CryptoLib =\n  typeof window !== 'undefined' && typeof window.document !== 'undefined'\n    ? window.crypto // Note: On browsers we need to use window.crypto instead of the imported crypto module as the latter is externalized and doesn't have getRandomValues().\n    : crypto\n\nif (!cryptoLib.getRandomValues) {\n  // Use a polyfill in older environments that have a crypto implementaton missing getRandomValues()\n  cryptoLib = cryptoLibPolyfill\n}\n\nabstract class BaseApiError<Code extends ErrorCode, Type extends string, Description extends string> extends Error {\n  public readonly isApiError = true\n\n  constructor(\n    public readonly code: Code,\n    public readonly description: Description,\n    public readonly type: Type,\n    public override readonly message: string,\n    public readonly error?: Error,\n    public readonly id?: string\n  ) {\n    super(message)\n\n    if (!this.id) {\n      this.id = BaseApiError.generateId()\n    }\n  }\n\n  format() {\n    return `[${this.type}] ${this.message} (Error ID: ${this.id})`\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      code: this.code,\n      type: this.type,\n      message: this.message,\n    }\n  }\n\n  static generateId() {\n    const randomSuffixByteLength = 4\n    const randomHexSuffix = Array.from(cryptoLib.getRandomValues(new Uint8Array(randomSuffixByteLength)))\n      .map(x => x.toString(16).padStart(2, '0'))\n      .join('')\n      .toUpperCase()\n    return `err_${Date.now()}x${randomHexSuffix}`\n  }\n}\n\nconst isObject = (obj: unknown): obj is object => typeof obj === 'object' && !Array.isArray(obj) && obj !== null\n\nexport const isApiError = (thrown: unknown): thrown is ApiError => {\n  return thrown instanceof BaseApiError || isObject(thrown) && (thrown as ApiError).isApiError === true\n}\n\ntype UnknownType = 'Unknown'\n\n/**\n *  An unknown error occurred\n */\nexport class UnknownError extends BaseApiError<500, UnknownType, 'An unknown error occurred'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(500, 'An unknown error occurred', 'Unknown', message, error, id)\n  }\n}\n\ntype InternalType = 'Internal'\n\n/**\n *  An internal error occurred\n */\nexport class InternalError extends BaseApiError<500, InternalType, 'An internal error occurred'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(500, 'An internal error occurred', 'Internal', message, error, id)\n  }\n}\n\ntype UnauthorizedType = 'Unauthorized'\n\n/**\n *  The request requires to be authenticated.\n */\nexport class UnauthorizedError extends BaseApiError<401, UnauthorizedType, 'The request requires to be authenticated.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(401, 'The request requires to be authenticated.', 'Unauthorized', message, error, id)\n  }\n}\n\ntype ForbiddenType = 'Forbidden'\n\n/**\n *  The requested action can\\'t be peform by this resource.\n */\nexport class ForbiddenError extends BaseApiError<403, ForbiddenType, 'The requested action can\\'t be peform by this resource.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(403, 'The requested action can\\'t be peform by this resource.', 'Forbidden', message, error, id)\n  }\n}\n\ntype PayloadTooLargeType = 'PayloadTooLarge'\n\n/**\n *  The request payload is too large.\n */\nexport class PayloadTooLargeError extends BaseApiError<413, PayloadTooLargeType, 'The request payload is too large.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(413, 'The request payload is too large.', 'PayloadTooLarge', message, error, id)\n  }\n}\n\ntype InvalidPayloadType = 'InvalidPayload'\n\n/**\n *  The request payload is invalid.\n */\nexport class InvalidPayloadError extends BaseApiError<400, InvalidPayloadType, 'The request payload is invalid.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The request payload is invalid.', 'InvalidPayload', message, error, id)\n  }\n}\n\ntype UnsupportedMediaTypeType = 'UnsupportedMediaType'\n\n/**\n *  The request is invalid because the content-type is not supported.\n */\nexport class UnsupportedMediaTypeError extends BaseApiError<415, UnsupportedMediaTypeType, 'The request is invalid because the content-type is not supported.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(415, 'The request is invalid because the content-type is not supported.', 'UnsupportedMediaType', message, error, id)\n  }\n}\n\ntype MethodNotFoundType = 'MethodNotFound'\n\n/**\n *  The requested method does not exist.\n */\nexport class MethodNotFoundError extends BaseApiError<405, MethodNotFoundType, 'The requested method does not exist.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(405, 'The requested method does not exist.', 'MethodNotFound', message, error, id)\n  }\n}\n\ntype ResourceNotFoundType = 'ResourceNotFound'\n\n/**\n *  The requested resource does not exist.\n */\nexport class ResourceNotFoundError extends BaseApiError<404, ResourceNotFoundType, 'The requested resource does not exist.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(404, 'The requested resource does not exist.', 'ResourceNotFound', message, error, id)\n  }\n}\n\ntype InvalidJsonSchemaType = 'InvalidJsonSchema'\n\n/**\n *  The provided JSON schema is invalid.\n */\nexport class InvalidJsonSchemaError extends BaseApiError<400, InvalidJsonSchemaType, 'The provided JSON schema is invalid.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided JSON schema is invalid.', 'InvalidJsonSchema', message, error, id)\n  }\n}\n\ntype InvalidDataFormatType = 'InvalidDataFormat'\n\n/**\n *  The provided data doesn\\'t respect the provided JSON schema.\n */\nexport class InvalidDataFormatError extends BaseApiError<400, InvalidDataFormatType, 'The provided data doesn\\'t respect the provided JSON schema.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided data doesn\\'t respect the provided JSON schema.', 'InvalidDataFormat', message, error, id)\n  }\n}\n\ntype InvalidIdentifierType = 'InvalidIdentifier'\n\n/**\n *  The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.\n */\nexport class InvalidIdentifierError extends BaseApiError<400, InvalidIdentifierType, 'The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.', 'InvalidIdentifier', message, error, id)\n  }\n}\n\ntype RelationConflictType = 'RelationConflict'\n\n/**\n *  The resource is not related with another resource. This is usually caused when providing two resources that aren\\'t linked together.\n */\nexport class RelationConflictError extends BaseApiError<409, RelationConflictType, 'The resource is not related with another resource. This is usually caused when providing two resources that aren\\'t linked together.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(409, 'The resource is not related with another resource. This is usually caused when providing two resources that aren\\'t linked together.', 'RelationConflict', message, error, id)\n  }\n}\n\ntype ReferenceNotFoundType = 'ReferenceNotFound'\n\n/**\n *  The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.\n */\nexport class ReferenceNotFoundError extends BaseApiError<400, ReferenceNotFoundType, 'The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.', 'ReferenceNotFound', message, error, id)\n  }\n}\n\ntype InvalidQueryType = 'InvalidQuery'\n\n/**\n *  The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.\n */\nexport class InvalidQueryError extends BaseApiError<400, InvalidQueryType, 'The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.', 'InvalidQuery', message, error, id)\n  }\n}\n\ntype RuntimeType = 'Runtime'\n\n/**\n *  An error happened during the execution of a runtime (bot or integration).\n */\nexport class RuntimeError extends BaseApiError<400, RuntimeType, 'An error happened during the execution of a runtime (bot or integration).'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(400, 'An error happened during the execution of a runtime (bot or integration).', 'Runtime', message, error, id)\n  }\n}\n\ntype AlreadyExistsType = 'AlreadyExists'\n\n/**\n *  The record attempted to be created already exists.\n */\nexport class AlreadyExistsError extends BaseApiError<409, AlreadyExistsType, 'The record attempted to be created already exists.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(409, 'The record attempted to be created already exists.', 'AlreadyExists', message, error, id)\n  }\n}\n\ntype RateLimitedType = 'RateLimited'\n\n/**\n *  The request has been rate limited.\n */\nexport class RateLimitedError extends BaseApiError<429, RateLimitedType, 'The request has been rate limited.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(429, 'The request has been rate limited.', 'RateLimited', message, error, id)\n  }\n}\n\ntype PaymentRequiredType = 'PaymentRequired'\n\n/**\n *  A payment is required to perform this request.\n */\nexport class PaymentRequiredError extends BaseApiError<402, PaymentRequiredType, 'A payment is required to perform this request.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(402, 'A payment is required to perform this request.', 'PaymentRequired', message, error, id)\n  }\n}\n\ntype QuotaExceededType = 'QuotaExceeded'\n\n/**\n *  The request exceeds the allowed quota. Quotas are a soft limit that can be increased.\n */\nexport class QuotaExceededError extends BaseApiError<403, QuotaExceededType, 'The request exceeds the allowed quota. Quotas are a soft limit that can be increased.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(403, 'The request exceeds the allowed quota. Quotas are a soft limit that can be increased.', 'QuotaExceeded', message, error, id)\n  }\n}\n\ntype LimitExceededType = 'LimitExceeded'\n\n/**\n *  The request exceeds the allowed limit. Limits are a hard limit that cannot be increased.\n */\nexport class LimitExceededError extends BaseApiError<413, LimitExceededType, 'The request exceeds the allowed limit. Limits are a hard limit that cannot be increased.'> {\n  constructor(message: string, error?: Error, id?: string) {\n    super(413, 'The request exceeds the allowed limit. Limits are a hard limit that cannot be increased.', 'LimitExceeded', message, error, id)\n  }\n}\n\nexport type ErrorType =\n  | 'Unknown'\n  | 'Internal'\n  | 'Unauthorized'\n  | 'Forbidden'\n  | 'PayloadTooLarge'\n  | 'InvalidPayload'\n  | 'UnsupportedMediaType'\n  | 'MethodNotFound'\n  | 'ResourceNotFound'\n  | 'InvalidJsonSchema'\n  | 'InvalidDataFormat'\n  | 'InvalidIdentifier'\n  | 'RelationConflict'\n  | 'ReferenceNotFound'\n  | 'InvalidQuery'\n  | 'Runtime'\n  | 'AlreadyExists'\n  | 'RateLimited'\n  | 'PaymentRequired'\n  | 'QuotaExceeded'\n  | 'LimitExceeded'\n\nexport type ApiError =\n  | UnknownError\n  | InternalError\n  | UnauthorizedError\n  | ForbiddenError\n  | PayloadTooLargeError\n  | InvalidPayloadError\n  | UnsupportedMediaTypeError\n  | MethodNotFoundError\n  | ResourceNotFoundError\n  | InvalidJsonSchemaError\n  | InvalidDataFormatError\n  | InvalidIdentifierError\n  | RelationConflictError\n  | ReferenceNotFoundError\n  | InvalidQueryError\n  | RuntimeError\n  | AlreadyExistsError\n  | RateLimitedError\n  | PaymentRequiredError\n  | QuotaExceededError\n  | LimitExceededError\n\nconst errorTypes: { [type: string]: new (message: string, error?: Error, id?: string) => ApiError } = {\n  Unknown: UnknownError,\n  Internal: InternalError,\n  Unauthorized: UnauthorizedError,\n  Forbidden: ForbiddenError,\n  PayloadTooLarge: PayloadTooLargeError,\n  InvalidPayload: InvalidPayloadError,\n  UnsupportedMediaType: UnsupportedMediaTypeError,\n  MethodNotFound: MethodNotFoundError,\n  ResourceNotFound: ResourceNotFoundError,\n  InvalidJsonSchema: InvalidJsonSchemaError,\n  InvalidDataFormat: InvalidDataFormatError,\n  InvalidIdentifier: InvalidIdentifierError,\n  RelationConflict: RelationConflictError,\n  ReferenceNotFound: ReferenceNotFoundError,\n  InvalidQuery: InvalidQueryError,\n  Runtime: RuntimeError,\n  AlreadyExists: AlreadyExistsError,\n  RateLimited: RateLimitedError,\n  PaymentRequired: PaymentRequiredError,\n  QuotaExceeded: QuotaExceededError,\n  LimitExceeded: LimitExceededError,\n}\n\nexport const errorFrom = (err: unknown): ApiError => {\n  if (isApiError(err)) {\n    return err\n  }\n  else if (err instanceof Error) {\n    return new UnknownError(err.message, err)\n  }\n  else if (typeof err === 'string') {\n    return new UnknownError(err)\n  }\n  else {\n    return getApiErrorFromObject(err)\n  }\n}\n\nfunction getApiErrorFromObject(err: any) {\n  // Check if it's an deserialized API error object\n  if (typeof err === 'object' && 'code' in err && 'type' in err && 'id' in err && 'message' in err && typeof err.type === 'string' && typeof err.message === 'string') {\n    const ErrorClass = errorTypes[err.type]\n    if (!ErrorClass) {\n      return new UnknownError(`An unclassified API error occurred: ${err.message} (Type: ${err.type}, Code: ${err.code})`)\n    }\n\n    return new ErrorClass(err.message, undefined, <string>err.id || 'UNKNOWN') // If error ID was not received do not pass undefined to generate a new one, flag it as UNKNOWN so we can fix the issue.\n  }\n\n  return new UnknownError('An invalid error occurred: ' + JSON.stringify(err))\n}\n", "export type ListenStatus = 'keep-listening' | 'stop-listening'\n\nexport class EventEmitter<E extends object> {\n  private listeners: {\n    [K in keyof E]?: ((event: E[K]) => void)[]\n  } = {}\n\n  public emit<K extends keyof E>(type: K, event: E[K]) {\n    const listeners = this.listeners[type]\n    if (!listeners) {\n      return\n    }\n    for (const listener of [...listeners]) {\n      listener(event)\n    }\n  }\n\n  public onceOrMore<K extends keyof E>(type: K, listener: (event: E[K]) => ListenStatus) {\n    const wrapped = (event: E[K]) => {\n      const status = listener(event)\n      if (status === 'stop-listening') {\n        this.off(type, wrapped)\n      }\n    }\n    this.on(type, wrapped)\n  }\n\n  public once<K extends keyof E>(type: K, listener: (event: E[K]) => void) {\n    const wrapped = (event: E[K]) => {\n      this.off(type, wrapped)\n      listener(event)\n    }\n    this.on(type, wrapped)\n  }\n\n  public on<K extends keyof E>(type: K, listener: (event: E[K]) => void) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = []\n    }\n    this.listeners[type]!.push(listener)\n  }\n\n  public off<K extends keyof E>(type: K, listener: (event: E[K]) => void) {\n    const listeners = this.listeners[type]\n    if (!listeners) {\n      return\n    }\n    const index = listeners.indexOf(listener)\n    if (index !== -1) {\n      listeners.splice(index, 1)\n    }\n  }\n\n  public cleanup() {\n    this.listeners = {}\n  }\n}\n", "import { isBrowser } from 'browser-or-node'\nimport type EventSourceNodeJs from 'eventsource'\nimport type EventSourceBrowser from 'event-source-polyfill'\nimport { EventEmitter } from './event-emitter'\n\ntype NodeOnOpen = EventSourceNodeJs['onopen']\ntype NodeOnMessage = EventSourceNodeJs['onmessage']\ntype NodeOnError = EventSourceNodeJs['onerror']\n\ntype NodeOpenEvent = Parameters<NodeOnOpen>[0]\ntype NodeMessageEvent = Parameters<NodeOnMessage>[0]\ntype NodeErrorEvent = Parameters<NodeOnError>[0]\n\ntype BrowserOnOpen = NonNullable<EventSourceBrowser.EventSourcePolyfill['onopen']>\ntype BrowserOnMessage = NonNullable<EventSourceBrowser.EventSourcePolyfill['onmessage']>\ntype BrowserOnError = NonNullable<EventSourceBrowser.EventSourcePolyfill['onerror']>\n\ntype BrowserOpenEvent = Parameters<BrowserOnOpen>[0]\ntype BrowserMessageEvent = Parameters<BrowserOnMessage>[0]\ntype BrowserErrorEvent = Parameters<BrowserOnError>[0]\n\nexport type OpenEvent = NodeOpenEvent | BrowserOpenEvent\nexport type MessageEvent = NodeMessageEvent | BrowserMessageEvent\nexport type ErrorEvent = NodeErrorEvent | BrowserErrorEvent\n\nexport type Events = {\n  open: OpenEvent\n  message: MessageEvent\n  error: ErrorEvent\n}\n\nexport type Props = {\n  headers?: Record<string, string>\n}\n\nconst makeEventSource = (url: string, props: Props = {}) => {\n  if (isBrowser) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const module: typeof EventSourceBrowser = require('event-source-polyfill')\n    const ctor = module.EventSourcePolyfill\n    const source = new ctor(url, { headers: props.headers })\n    const emitter = new EventEmitter<Events>()\n    source.onopen = (ev) => emitter.emit('open', ev)\n    source.onmessage = (ev) => emitter.emit('message', ev)\n    source.onerror = (ev) => emitter.emit('error', ev)\n    return {\n      emitter,\n      source,\n    }\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const module: typeof EventSourceNodeJs = require('eventsource')\n    const source = new module(url, { headers: props.headers })\n    const emitter = new EventEmitter<Events>()\n    source.onopen = (ev) => emitter.emit('open', ev)\n    source.onmessage = (ev) => emitter.emit('message', ev)\n    source.onerror = (ev) => emitter.emit('error', ev)\n    return {\n      emitter,\n      source,\n    }\n  }\n}\n\nexport type EvSource = {\n  on: EventEmitter<Events>['on']\n  close: () => void\n}\n\nexport const listenEventSource = async (url: string, props: Props = {}): Promise<EvSource> => {\n  const { emitter, source } = makeEventSource(url, props)\n\n  await new Promise<void>((resolve, reject) => {\n    emitter.on('open', () => {\n      resolve()\n    })\n    emitter.on('error', (thrown) => {\n      reject(thrown)\n    })\n  }).finally(() => emitter.cleanup())\n\n  return {\n    on: emitter.on.bind(emitter),\n    close: () => {\n      emitter.cleanup()\n      source.close()\n    },\n  }\n}\n", "import { z } from \"zod\";\n\nexport default z\n  .object({\n    type: z.literal(\"message_created\"),\n    data: z\n      .object({\n        id: z.string(),\n        fid: z.string().optional(),\n        createdAt: z.string().datetime(),\n        payload: z.union([\n          z\n            .object({\n              type: z.literal(\"button\"),\n              variant: z.enum([\"action\", \"link\"]),\n              reusable: z.boolean().optional(),\n              groupId: z.string().optional(),\n              text: z.string(),\n              buttonValue: z.string(),\n            })\n            ,\n          z\n            .object({ type: z.literal(\"text\"), text: z.string() })\n            ,\n          z\n            .object({\n              type: z.literal(\"image\"),\n              orientation: z\n                .enum([\"portrait\", \"landscape\", \"square\", \"auto\"])\n                .optional(),\n              url: z.string(),\n            })\n            ,\n          z\n            .object({ type: z.literal(\"audio\"), url: z.string() })\n            ,\n          z\n            .object({ type: z.literal(\"video\"), url: z.string() })\n            ,\n          z\n            .object({\n              type: z.literal(\"file\"),\n              url: z.string(),\n              title: z.string().optional(),\n            })\n            ,\n          z\n            .object({\n              type: z.literal(\"location\"),\n              latitude: z.number(),\n              longitude: z.number(),\n              title: z.string().optional(),\n            })\n            ,\n          z\n            .object({\n              type: z.literal(\"custom\"),\n              payload: z.object({}).catchall(z.any()),\n            })\n            ,\n        ]),\n        userId: z.string(),\n        conversationId: z.string(),\n      })\n      ,\n  })\n  ;\n", "import zod_messageCreatedSignal from './messageCreatedSignal.z'\nimport json_messageCreatedSignal from './messageCreatedSignal.j'\nimport type { MessageCreatedSignal } from './messageCreatedSignal.t'\n\nexport const zod = {\n  messageCreatedSignal: zod_messageCreatedSignal,\n}\n\nexport const json = {\n  messageCreatedSignal: json_messageCreatedSignal,\n}\n\nexport type Types = {\n  messageCreatedSignal: MessageCreatedSignal\n}", "import { EventEmitter } from './event-emitter'\nimport { listenEventSource, EvSource, MessageEvent, ErrorEvent } from './eventsource'\nimport { zod as signals, Types } from './gen/signals'\n\nconst DEFAULT_ERROR_MESSAGE = 'unknown error'\n\ntype ValueOf<T> = T[keyof T]\n\ntype Signals = Types & {\n  unknown: {\n    type: 'unknown'\n    data: unknown\n  }\n}\n\ntype SignalMap = {\n  [K in keyof Signals as Signals[K]['type']]: Signals[K]['data']\n}\n\ntype Events = SignalMap & {\n  error: Error\n}\n\ntype SignalListenerState =\n  | {\n      status: 'disconnected'\n    }\n  | {\n      status: 'connecting'\n      connectionPromise: Promise<EvSource>\n    }\n  | {\n      status: 'connected'\n      source: EvSource\n    }\n\nexport type SignalListenerStatus = SignalListenerState['status']\n\nexport type SignalListenerProps = {\n  url: string\n  chatKey: string\n  conversationId: string\n}\n\nexport class SignalListener extends EventEmitter<Events> {\n  private _state: SignalListenerState = { status: 'disconnected' }\n\n  public constructor(private _props: SignalListenerProps) {\n    super()\n  }\n  public static listen = async (props: SignalListenerProps): Promise<SignalListener> => {\n    const inst = new SignalListener(props)\n    await inst.connect()\n    return inst\n  }\n\n  public get status(): SignalListenerStatus {\n    return this._state.status\n  }\n\n  public readonly connect = async (): Promise<void> => {\n    if (this._state.status === 'connected') {\n      return\n    }\n\n    if (this._state.status === 'connecting') {\n      await this._state.connectionPromise\n      return\n    }\n\n    const connectionPromise = this._connect()\n\n    this._state = { status: 'connecting', connectionPromise }\n\n    await connectionPromise\n  }\n\n  public readonly disconnect = async (): Promise<void> => {\n    if (this._state.status === 'disconnected') {\n      return\n    }\n\n    let source: EvSource\n    if (this._state.status === 'connecting') {\n      source = await this._state.connectionPromise\n    } else {\n      source = this._state.source\n    }\n\n    this._disconnectSync(source)\n  }\n\n  private _connect = async (): Promise<EvSource> => {\n    const source = await listenEventSource(`${this._props.url}/v1/conversations/${this._props.conversationId}/listen`, {\n      headers: { 'x-chat-key': this._props.chatKey },\n    })\n\n    source.on('message', this._handleMessage)\n    source.on('error', this._handleError(source))\n\n    this._state = { status: 'connected', source }\n    return source\n  }\n\n  private _disconnectSync = (source: EvSource): void => {\n    source.close()\n    this._state = { status: 'disconnected' }\n  }\n\n  private _handleMessage = (ev: MessageEvent) => {\n    const signal = this._parseSignal(ev.data)\n    this.emit(signal.type, signal.data)\n  }\n\n  private _handleError = (source: EvSource) => (ev: ErrorEvent) => {\n    this._disconnectSync(source)\n    const err = this._toError(ev)\n    this.emit('error', err)\n  }\n\n  private _parseSignal = (data: unknown): ValueOf<Signals> => {\n    for (const schema of Object.values(signals)) {\n      const parsedData = this._safeJsonParse(data)\n      const parseResult = schema.safeParse(parsedData)\n      if (parseResult.success) {\n        return parseResult.data\n      }\n    }\n    return {\n      type: 'unknown',\n      data,\n    }\n  }\n\n  private _safeJsonParse = (x: any) => {\n    try {\n      return JSON.parse(x)\n    } catch {\n      return x\n    }\n  }\n\n  private _toError = (thrown: unknown): Error => {\n    if (thrown instanceof Error) {\n      return thrown\n    }\n    if (typeof thrown === 'string') {\n      return new Error(thrown)\n    }\n    if (thrown === null) {\n      return new Error(DEFAULT_ERROR_MESSAGE)\n    }\n    if (typeof thrown === 'object' && 'message' in thrown) {\n      return this._toError(thrown.message)\n    }\n    try {\n      const json = JSON.stringify(thrown)\n      return new Error(json)\n    } catch {\n      return new Error(DEFAULT_ERROR_MESSAGE)\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["axios", "import_browser_or_node", "import_axios", "import_axios", "import_axios", "axios", "globalAxios", "globalAxios", "BASE_PATH", "axios", "globalAxios", "crypto", "axios", "module", "axios", "axios"]
}
