/**
 * Chat API
 * API for the Chat Integration
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AddParticipantBody
 */
export interface AddParticipantBody {
    /**
     * User id
     * @type {string}
     * @memberof AddParticipantBody
     */
    'userId': string;
}
/**
 *
 * @export
 * @interface AddParticipantResponse
 */
export interface AddParticipantResponse {
    /**
     *
     * @type {User}
     * @memberof AddParticipantResponse
     */
    'participant': User;
}
/**
 * Schema of the remotly generated chat key.
 * @export
 * @interface ChatKey
 */
export interface ChatKey {
    /**
     * Name of the [User](#schema_user)
     * @type {string}
     * @memberof ChatKey
     */
    'name'?: string;
    /**
     * Picture url of the [User](#schema_user)
     * @type {string}
     * @memberof ChatKey
     */
    'pictureUrl'?: string;
    /**
     * Custom profile data of the [User](#schema_user) encoded as a string
     * @type {string}
     * @memberof ChatKey
     */
    'profile'?: string;
    /**
     * Foreign identifier of the [User](#schema_user) in an external system
     * @type {string}
     * @memberof ChatKey
     */
    'fid': string;
}
/**
 *
 * @export
 * @interface Conversation
 */
export interface Conversation {
    /**
     * Id of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Conversation
     */
    'id': string;
    /**
     * Foreign identifier of the [Conversation](#schema_conversation) in an external system
     * @type {string}
     * @memberof Conversation
     */
    'fid'?: string;
    /**
     * Creation date of the [Conversation](#schema_conversation) in ISO 8601 format
     * @type {string}
     * @memberof Conversation
     */
    'createdAt': string;
    /**
     * Updating date of the [Conversation](#schema_conversation) in ISO 8601 format
     * @type {string}
     * @memberof Conversation
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface CreateConversationBody
 */
export interface CreateConversationBody {
    /**
     * Foreign identifier of the [Conversation](#schema_conversation) in an external system
     * @type {string}
     * @memberof CreateConversationBody
     */
    'fid'?: string;
}
/**
 *
 * @export
 * @interface CreateConversationResponse
 */
export interface CreateConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof CreateConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface CreateMessageBody
 */
export interface CreateMessageBody {
    /**
     *
     * @type {CreateMessageBodyPayload}
     * @memberof CreateMessageBody
     */
    'payload': CreateMessageBodyPayload;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof CreateMessageBody
     */
    'conversationId': string;
    /**
     * Foreign identifier of the [Message](#schema_message) in an external system
     * @type {string}
     * @memberof CreateMessageBody
     */
    'fid'?: string;
}
/**
 * @type CreateMessageBodyPayload
 * Payload is the content type of the message.
 * @export
 */
export type CreateMessageBodyPayload = CreateMessageBodyPayloadOneOf | CreateMessageBodyPayloadOneOf1 | CreateMessageBodyPayloadOneOf2 | CreateMessageBodyPayloadOneOf3 | CreateMessageBodyPayloadOneOf4 | CreateMessageBodyPayloadOneOf5 | CreateMessageBodyPayloadOneOf6 | CreateMessageBodyPayloadOneOf7;
/**
 *
 * @export
 * @interface CreateMessageBodyPayloadOneOf
 */
export interface CreateMessageBodyPayloadOneOf {
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf
     */
    'type': CreateMessageBodyPayloadOneOfTypeEnum;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf
     */
    'variant': CreateMessageBodyPayloadOneOfVariantEnum;
    /**
     *
     * @type {boolean}
     * @memberof CreateMessageBodyPayloadOneOf
     */
    'reusable'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf
     */
    'groupId'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf
     */
    'text': string;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf
     */
    'buttonValue': string;
}
export declare const CreateMessageBodyPayloadOneOfTypeEnum: {
    readonly Button: "button";
};
export type CreateMessageBodyPayloadOneOfTypeEnum = typeof CreateMessageBodyPayloadOneOfTypeEnum[keyof typeof CreateMessageBodyPayloadOneOfTypeEnum];
export declare const CreateMessageBodyPayloadOneOfVariantEnum: {
    readonly Action: "action";
    readonly Link: "link";
};
export type CreateMessageBodyPayloadOneOfVariantEnum = typeof CreateMessageBodyPayloadOneOfVariantEnum[keyof typeof CreateMessageBodyPayloadOneOfVariantEnum];
/**
 *
 * @export
 * @interface CreateMessageBodyPayloadOneOf1
 */
export interface CreateMessageBodyPayloadOneOf1 {
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf1
     */
    'type': CreateMessageBodyPayloadOneOf1TypeEnum;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf1
     */
    'text': string;
}
export declare const CreateMessageBodyPayloadOneOf1TypeEnum: {
    readonly Text: "text";
};
export type CreateMessageBodyPayloadOneOf1TypeEnum = typeof CreateMessageBodyPayloadOneOf1TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf1TypeEnum];
/**
 *
 * @export
 * @interface CreateMessageBodyPayloadOneOf2
 */
export interface CreateMessageBodyPayloadOneOf2 {
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf2
     */
    'type': CreateMessageBodyPayloadOneOf2TypeEnum;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf2
     */
    'orientation'?: CreateMessageBodyPayloadOneOf2OrientationEnum;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf2
     */
    'url': string;
}
export declare const CreateMessageBodyPayloadOneOf2TypeEnum: {
    readonly Image: "image";
};
export type CreateMessageBodyPayloadOneOf2TypeEnum = typeof CreateMessageBodyPayloadOneOf2TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf2TypeEnum];
export declare const CreateMessageBodyPayloadOneOf2OrientationEnum: {
    readonly Portrait: "portrait";
    readonly Landscape: "landscape";
    readonly Square: "square";
    readonly Auto: "auto";
};
export type CreateMessageBodyPayloadOneOf2OrientationEnum = typeof CreateMessageBodyPayloadOneOf2OrientationEnum[keyof typeof CreateMessageBodyPayloadOneOf2OrientationEnum];
/**
 *
 * @export
 * @interface CreateMessageBodyPayloadOneOf3
 */
export interface CreateMessageBodyPayloadOneOf3 {
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf3
     */
    'type': CreateMessageBodyPayloadOneOf3TypeEnum;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf3
     */
    'url': string;
}
export declare const CreateMessageBodyPayloadOneOf3TypeEnum: {
    readonly Audio: "audio";
};
export type CreateMessageBodyPayloadOneOf3TypeEnum = typeof CreateMessageBodyPayloadOneOf3TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf3TypeEnum];
/**
 *
 * @export
 * @interface CreateMessageBodyPayloadOneOf4
 */
export interface CreateMessageBodyPayloadOneOf4 {
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf4
     */
    'type': CreateMessageBodyPayloadOneOf4TypeEnum;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf4
     */
    'url': string;
}
export declare const CreateMessageBodyPayloadOneOf4TypeEnum: {
    readonly Video: "video";
};
export type CreateMessageBodyPayloadOneOf4TypeEnum = typeof CreateMessageBodyPayloadOneOf4TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf4TypeEnum];
/**
 *
 * @export
 * @interface CreateMessageBodyPayloadOneOf5
 */
export interface CreateMessageBodyPayloadOneOf5 {
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf5
     */
    'type': CreateMessageBodyPayloadOneOf5TypeEnum;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf5
     */
    'url': string;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf5
     */
    'title'?: string;
}
export declare const CreateMessageBodyPayloadOneOf5TypeEnum: {
    readonly File: "file";
};
export type CreateMessageBodyPayloadOneOf5TypeEnum = typeof CreateMessageBodyPayloadOneOf5TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf5TypeEnum];
/**
 *
 * @export
 * @interface CreateMessageBodyPayloadOneOf6
 */
export interface CreateMessageBodyPayloadOneOf6 {
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf6
     */
    'type': CreateMessageBodyPayloadOneOf6TypeEnum;
    /**
     *
     * @type {number}
     * @memberof CreateMessageBodyPayloadOneOf6
     */
    'latitude': number;
    /**
     *
     * @type {number}
     * @memberof CreateMessageBodyPayloadOneOf6
     */
    'longitude': number;
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf6
     */
    'title'?: string;
}
export declare const CreateMessageBodyPayloadOneOf6TypeEnum: {
    readonly Location: "location";
};
export type CreateMessageBodyPayloadOneOf6TypeEnum = typeof CreateMessageBodyPayloadOneOf6TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf6TypeEnum];
/**
 *
 * @export
 * @interface CreateMessageBodyPayloadOneOf7
 */
export interface CreateMessageBodyPayloadOneOf7 {
    /**
     *
     * @type {string}
     * @memberof CreateMessageBodyPayloadOneOf7
     */
    'type': CreateMessageBodyPayloadOneOf7TypeEnum;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof CreateMessageBodyPayloadOneOf7
     */
    'payload': {
        [key: string]: any;
    };
}
export declare const CreateMessageBodyPayloadOneOf7TypeEnum: {
    readonly Custom: "custom";
};
export type CreateMessageBodyPayloadOneOf7TypeEnum = typeof CreateMessageBodyPayloadOneOf7TypeEnum[keyof typeof CreateMessageBodyPayloadOneOf7TypeEnum];
/**
 *
 * @export
 * @interface CreateMessageResponse
 */
export interface CreateMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof CreateMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface CreateUserBody
 */
export interface CreateUserBody {
    /**
     * Foreign identifier of the [User](#schema_user) in an external system
     * @type {string}
     * @memberof CreateUserBody
     */
    'fid'?: string;
    /**
     * Name of the [User](#schema_user) (not a unique identifier)
     * @type {string}
     * @memberof CreateUserBody
     */
    'name'?: string;
    /**
     * Picture url of the [User](#schema_user)
     * @type {string}
     * @memberof CreateUserBody
     */
    'pictureUrl'?: string;
    /**
     * Custom profile data of the [User](#schema_user) encoded as a string
     * @type {string}
     * @memberof CreateUserBody
     */
    'profile'?: string;
}
/**
 *
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     *
     * @type {User}
     * @memberof CreateUserResponse
     */
    'user': User;
    /**
     *
     * @type {string}
     * @memberof CreateUserResponse
     */
    'key': string;
}
/**
 *
 * @export
 * @interface GetConversationResponse
 */
export interface GetConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof GetConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface GetMessageResponse
 */
export interface GetMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof GetMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface GetOrCreateConversationBody
 */
export interface GetOrCreateConversationBody {
    /**
     * Foreign identifier of the [Conversation](#schema_conversation) in an external system
     * @type {string}
     * @memberof GetOrCreateConversationBody
     */
    'fid': string;
}
/**
 *
 * @export
 * @interface GetOrCreateConversationResponse
 */
export interface GetOrCreateConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof GetOrCreateConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface GetOrCreateMessageBody
 */
export interface GetOrCreateMessageBody {
    /**
     *
     * @type {CreateMessageBodyPayload}
     * @memberof GetOrCreateMessageBody
     */
    'payload': CreateMessageBodyPayload;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof GetOrCreateMessageBody
     */
    'conversationId': string;
    /**
     * Foreign identifier of the [Message](#schema_message) in an external system
     * @type {string}
     * @memberof GetOrCreateMessageBody
     */
    'fid': string;
}
/**
 *
 * @export
 * @interface GetOrCreateMessageResponse
 */
export interface GetOrCreateMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof GetOrCreateMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface GetParticipantResponse
 */
export interface GetParticipantResponse {
    /**
     *
     * @type {User}
     * @memberof GetParticipantResponse
     */
    'participant': User;
}
/**
 *
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     *
     * @type {User}
     * @memberof GetUserResponse
     */
    'user': User;
}
/**
 *
 * @export
 * @interface ListConversationMessagesResponse
 */
export interface ListConversationMessagesResponse {
    /**
     *
     * @type {Array<Message>}
     * @memberof ListConversationMessagesResponse
     */
    'messages': Array<Message>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListConversationMessagesResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListConversationsResponse
 */
export interface ListConversationsResponse {
    /**
     *
     * @type {Array<ListConversationsResponseConversationsInner>}
     * @memberof ListConversationsResponse
     */
    'conversations': Array<ListConversationsResponseConversationsInner>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListConversationsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 *
 * @export
 * @interface ListConversationsResponseConversationsInner
 */
export interface ListConversationsResponseConversationsInner {
    /**
     * Id of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof ListConversationsResponseConversationsInner
     */
    'id': string;
    /**
     * Foreign identifier of the [Conversation](#schema_conversation) in an external system
     * @type {string}
     * @memberof ListConversationsResponseConversationsInner
     */
    'fid'?: string;
    /**
     * Creation date of the [Conversation](#schema_conversation) in ISO 8601 format
     * @type {string}
     * @memberof ListConversationsResponseConversationsInner
     */
    'createdAt': string;
    /**
     * Updating date of the [Conversation](#schema_conversation) in ISO 8601 format
     * @type {string}
     * @memberof ListConversationsResponseConversationsInner
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface ListConversationsResponseMeta
 */
export interface ListConversationsResponseMeta {
    /**
     * The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint.
     * @type {string}
     * @memberof ListConversationsResponseMeta
     */
    'nextToken'?: string;
}
/**
 *
 * @export
 * @interface ListParticipantsResponse
 */
export interface ListParticipantsResponse {
    /**
     *
     * @type {Array<User>}
     * @memberof ListParticipantsResponse
     */
    'participants': Array<User>;
    /**
     *
     * @type {ListConversationsResponseMeta}
     * @memberof ListParticipantsResponse
     */
    'meta': ListConversationsResponseMeta;
}
/**
 * The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * Id of the [Message](#schema_message)
     * @type {string}
     * @memberof Message
     */
    'id': string;
    /**
     * Foreign identifier of the [Message](#schema_message) in an external system
     * @type {string}
     * @memberof Message
     */
    'fid'?: string;
    /**
     * Creation date of the [Message](#schema_message) in ISO 8601 format
     * @type {string}
     * @memberof Message
     */
    'createdAt': string;
    /**
     * Type of the [Message](#schema_message) represents the resource type that the message is related to
     * @type {string}
     * @memberof Message
     */
    'type': string;
    /**
     *
     * @type {CreateMessageBodyPayload}
     * @memberof Message
     */
    'payload': CreateMessageBodyPayload;
    /**
     * ID of the [User](#schema_user)
     * @type {string}
     * @memberof Message
     */
    'userId': string;
    /**
     * ID of the [Conversation](#schema_conversation)
     * @type {string}
     * @memberof Message
     */
    'conversationId': string;
}
/**
 *
 * @export
 * @interface UpdateConversationBody
 */
export interface UpdateConversationBody {
    /**
     * Foreign identifier of the [Conversation](#schema_conversation) in an external system
     * @type {string}
     * @memberof UpdateConversationBody
     */
    'fid'?: string;
}
/**
 *
 * @export
 * @interface UpdateConversationResponse
 */
export interface UpdateConversationResponse {
    /**
     *
     * @type {Conversation}
     * @memberof UpdateConversationResponse
     */
    'conversation': Conversation;
}
/**
 *
 * @export
 * @interface UpdateMessageBody
 */
export interface UpdateMessageBody {
    /**
     * Foreign identifier of the [Message](#schema_message) in an external system
     * @type {string}
     * @memberof UpdateMessageBody
     */
    'fid'?: string;
}
/**
 *
 * @export
 * @interface UpdateMessageResponse
 */
export interface UpdateMessageResponse {
    /**
     *
     * @type {Message}
     * @memberof UpdateMessageResponse
     */
    'message': Message;
}
/**
 *
 * @export
 * @interface UpdateUserBody
 */
export interface UpdateUserBody {
    /**
     * Foreign identifier of the [User](#schema_user) in an external system
     * @type {string}
     * @memberof UpdateUserBody
     */
    'fid'?: string;
    /**
     * Name of the [User](#schema_user) (not a unique identifier)
     * @type {string}
     * @memberof UpdateUserBody
     */
    'name'?: string;
    /**
     * Picture url of the [User](#schema_user)
     * @type {string}
     * @memberof UpdateUserBody
     */
    'pictureUrl'?: string;
    /**
     * Custom profile data of the [User](#schema_user) encoded as a string
     * @type {string}
     * @memberof UpdateUserBody
     */
    'profile'?: string;
}
/**
 *
 * @export
 * @interface UpdateUserResponse
 */
export interface UpdateUserResponse {
    /**
     *
     * @type {User}
     * @memberof UpdateUserResponse
     */
    'user': User;
}
/**
 * The user object represents someone interacting with the bot within a specific integration. The same person interacting with a bot in slack and messenger will be represented with two different users.
 * @export
 * @interface User
 */
export interface User {
    /**
     * Name of the [User](#schema_user)
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * Picture url of the [User](#schema_user)
     * @type {string}
     * @memberof User
     */
    'pictureUrl'?: string;
    /**
     * Custom profile data of the [User](#schema_user) encoded as a string
     * @type {string}
     * @memberof User
     */
    'profile'?: string;
    /**
     * Id of the [User](#schema_user)
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * Foreign identifier of the [User](#schema_user) in an external system
     * @type {string}
     * @memberof User
     */
    'fid'?: string;
    /**
     * Creation date of the [User](#schema_user) in ISO 8601 format
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * Updating date of the [User](#schema_user) in ISO 8601 format
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add a [Participant](#schema_user) to a [Conversation](#schema_conversation).
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {AddParticipantBody} [addParticipantBody] Participant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParticipant: (xChatKey: string, id: string, addParticipantBody?: AddParticipantBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Conversation](#schema_conversation)
     * @param {string} xChatKey Authentication Key
     * @param {CreateConversationBody} [createConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation: (xChatKey: string, createConversationBody?: CreateConversationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Message](#schema_message)
     * @param {string} xChatKey Authentication Key
     * @param {CreateMessageBody} [createMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage: (xChatKey: string, createMessageBody?: CreateMessageBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [User](#schema_user)
     * @param {CreateUserBody} [createUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (createUserBody?: CreateUserBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation: (xChatKey: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {string} xChatKey Authentication Key
     * @param {string} id Message id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage: (xChatKey: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {string} xChatKey Authentication Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (xChatKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation: (xChatKey: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {string} xChatKey Authentication Key
     * @param {string} id Id of the Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage: (xChatKey: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Conversation](#schema_conversation) if it does not exist yet, otherwise returns the existing one
     * @param {string} xChatKey Authentication Key
     * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateConversation: (xChatKey: string, getOrCreateConversationBody?: GetOrCreateConversationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Message](#schema_message) if it does not exist yet, otherwise returns the existing one
     * @param {string} xChatKey Authentication Key
     * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateMessage: (xChatKey: string, getOrCreateMessageBody?: GetOrCreateMessageBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a [Participant](#schema_user) from a [Conversation](#schema_conversation).
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipant: (xChatKey: string, id: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {string} xChatKey Authentication Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (xChatKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves the conversation\'s [Messages](#schema_message)
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationMessages: (xChatKey: string, id: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of [Conversation](#schema_conversation) objects
     * @param {string} xChatKey Authentication Key
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversations: (xChatKey: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of [Participants](#schema_user) for a given [Conversation](#schema_conversation).
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listParticipants: (xChatKey: string, id: string, nextToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a SSE stream to receive messages and events from a conversation
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listenConversation: (xChatKey: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove a [Participant](#schema_user) from a [Conversation](#schema_conversation).
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParticipant: (xChatKey: string, id: string, userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new [Conversation](#schema_conversation)
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {UpdateConversationBody} [updateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation: (xChatKey: string, id: string, updateConversationBody?: UpdateConversationBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a [Message](#schema_message)
     * @param {string} xChatKey Authentication Key
     * @param {string} id Message id
     * @param {UpdateMessageBody} [updateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessage: (xChatKey: string, id: string, updateMessageBody?: UpdateMessageBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update [User](#schema_user)
     * @param {string} xChatKey Authentication Key
     * @param {UpdateUserBody} [updateUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (xChatKey: string, updateUserBody?: UpdateUserBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     * Add a [Participant](#schema_user) to a [Conversation](#schema_conversation).
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {AddParticipantBody} [addParticipantBody] Participant data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParticipant(xChatKey: string, id: string, addParticipantBody?: AddParticipantBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddParticipantResponse>>;
    /**
     * Creates a new [Conversation](#schema_conversation)
     * @param {string} xChatKey Authentication Key
     * @param {CreateConversationBody} [createConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation(xChatKey: string, createConversationBody?: CreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConversationResponse>>;
    /**
     * Creates a new [Message](#schema_message)
     * @param {string} xChatKey Authentication Key
     * @param {CreateMessageBody} [createMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage(xChatKey: string, createMessageBody?: CreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMessageResponse>>;
    /**
     * Creates a new [User](#schema_user)
     * @param {CreateUserBody} [createUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUserBody?: CreateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponse>>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation(xChatKey: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {string} xChatKey Authentication Key
     * @param {string} id Message id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(xChatKey: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {string} xChatKey Authentication Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(xChatKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation(xChatKey: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConversationResponse>>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {string} xChatKey Authentication Key
     * @param {string} id Id of the Message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(xChatKey: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessageResponse>>;
    /**
     * Creates a new [Conversation](#schema_conversation) if it does not exist yet, otherwise returns the existing one
     * @param {string} xChatKey Authentication Key
     * @param {GetOrCreateConversationBody} [getOrCreateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateConversation(xChatKey: string, getOrCreateConversationBody?: GetOrCreateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateConversationResponse>>;
    /**
     * Creates a new [Message](#schema_message) if it does not exist yet, otherwise returns the existing one
     * @param {string} xChatKey Authentication Key
     * @param {GetOrCreateMessageBody} [getOrCreateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateMessage(xChatKey: string, getOrCreateMessageBody?: GetOrCreateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrCreateMessageResponse>>;
    /**
     * Retrieves a [Participant](#schema_user) from a [Conversation](#schema_conversation).
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipant(xChatKey: string, id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetParticipantResponse>>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {string} xChatKey Authentication Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(xChatKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>>;
    /**
     * Retrieves the conversation\'s [Messages](#schema_message)
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationMessages(xChatKey: string, id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListConversationMessagesResponse>>;
    /**
     * Returns a list of [Conversation](#schema_conversation) objects
     * @param {string} xChatKey Authentication Key
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversations(xChatKey: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListConversationsResponse>>;
    /**
     * Retrieves a list of [Participants](#schema_user) for a given [Conversation](#schema_conversation).
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {string} [nextToken] Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listParticipants(xChatKey: string, id: string, nextToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListParticipantsResponse>>;
    /**
     * Creates a SSE stream to receive messages and events from a conversation
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listenConversation(xChatKey: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Remove a [Participant](#schema_user) from a [Conversation](#schema_conversation).
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {string} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParticipant(xChatKey: string, id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Creates a new [Conversation](#schema_conversation)
     * @param {string} xChatKey Authentication Key
     * @param {string} id Conversation id
     * @param {UpdateConversationBody} [updateConversationBody] Conversation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation(xChatKey: string, id: string, updateConversationBody?: UpdateConversationBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateConversationResponse>>;
    /**
     * Update a [Message](#schema_message)
     * @param {string} xChatKey Authentication Key
     * @param {string} id Message id
     * @param {UpdateMessageBody} [updateMessageBody] Message data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessage(xChatKey: string, id: string, updateMessageBody?: UpdateMessageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateMessageResponse>>;
    /**
     * Update [User](#schema_user)
     * @param {string} xChatKey Authentication Key
     * @param {UpdateUserBody} [updateUserBody] User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(xChatKey: string, updateUserBody?: UpdateUserBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add a [Participant](#schema_user) to a [Conversation](#schema_conversation).
     * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<AddParticipantResponse>;
    /**
     * Creates a new [Conversation](#schema_conversation)
     * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversation(requestParameters: DefaultApiCreateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<CreateConversationResponse>;
    /**
     * Creates a new [Message](#schema_message)
     * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessage(requestParameters: DefaultApiCreateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<CreateMessageResponse>;
    /**
     * Creates a new [User](#schema_user)
     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(requestParameters?: DefaultApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<CreateUserResponse>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig): AxiosPromise<GetConversationResponse>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig): AxiosPromise<GetMessageResponse>;
    /**
     * Creates a new [Conversation](#schema_conversation) if it does not exist yet, otherwise returns the existing one
     * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateConversation(requestParameters: DefaultApiGetOrCreateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateConversationResponse>;
    /**
     * Creates a new [Message](#schema_message) if it does not exist yet, otherwise returns the existing one
     * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrCreateMessage(requestParameters: DefaultApiGetOrCreateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrCreateMessageResponse>;
    /**
     * Retrieves a [Participant](#schema_user) from a [Conversation](#schema_conversation).
     * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<GetParticipantResponse>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {DefaultApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<GetUserResponse>;
    /**
     * Retrieves the conversation\'s [Messages](#schema_message)
     * @param {DefaultApiListConversationMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationMessages(requestParameters: DefaultApiListConversationMessagesRequest, options?: AxiosRequestConfig): AxiosPromise<ListConversationMessagesResponse>;
    /**
     * Returns a list of [Conversation](#schema_conversation) objects
     * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversations(requestParameters: DefaultApiListConversationsRequest, options?: AxiosRequestConfig): AxiosPromise<ListConversationsResponse>;
    /**
     * Retrieves a list of [Participants](#schema_user) for a given [Conversation](#schema_conversation).
     * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig): AxiosPromise<ListParticipantsResponse>;
    /**
     * Creates a SSE stream to receive messages and events from a conversation
     * @param {DefaultApiListenConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listenConversation(requestParameters: DefaultApiListenConversationRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Remove a [Participant](#schema_user) from a [Conversation](#schema_conversation).
     * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Creates a new [Conversation](#schema_conversation)
     * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateConversationResponse>;
    /**
     * Update a [Message](#schema_message)
     * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateMessageResponse>;
    /**
     * Update [User](#schema_user)
     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateUserResponse>;
};
/**
 * Request parameters for addParticipant operation in DefaultApi.
 * @export
 * @interface DefaultApiAddParticipantRequest
 */
export interface DefaultApiAddParticipantRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiAddParticipant
     */
    readonly xChatKey: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiAddParticipant
     */
    readonly id: string;
    /**
     * Participant data
     * @type {AddParticipantBody}
     * @memberof DefaultApiAddParticipant
     */
    readonly addParticipantBody?: AddParticipantBody;
}
/**
 * Request parameters for createConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateConversationRequest
 */
export interface DefaultApiCreateConversationRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiCreateConversation
     */
    readonly xChatKey: string;
    /**
     * Conversation data
     * @type {CreateConversationBody}
     * @memberof DefaultApiCreateConversation
     */
    readonly createConversationBody?: CreateConversationBody;
}
/**
 * Request parameters for createMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateMessageRequest
 */
export interface DefaultApiCreateMessageRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiCreateMessage
     */
    readonly xChatKey: string;
    /**
     * Message data
     * @type {CreateMessageBody}
     * @memberof DefaultApiCreateMessage
     */
    readonly createMessageBody?: CreateMessageBody;
}
/**
 * Request parameters for createUser operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateUserRequest
 */
export interface DefaultApiCreateUserRequest {
    /**
     * User data
     * @type {CreateUserBody}
     * @memberof DefaultApiCreateUser
     */
    readonly createUserBody?: CreateUserBody;
}
/**
 * Request parameters for deleteConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteConversationRequest
 */
export interface DefaultApiDeleteConversationRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiDeleteConversation
     */
    readonly xChatKey: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiDeleteConversation
     */
    readonly id: string;
}
/**
 * Request parameters for deleteMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteMessageRequest
 */
export interface DefaultApiDeleteMessageRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiDeleteMessage
     */
    readonly xChatKey: string;
    /**
     * Message id
     * @type {string}
     * @memberof DefaultApiDeleteMessage
     */
    readonly id: string;
}
/**
 * Request parameters for deleteUser operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteUserRequest
 */
export interface DefaultApiDeleteUserRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiDeleteUser
     */
    readonly xChatKey: string;
}
/**
 * Request parameters for getConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiGetConversationRequest
 */
export interface DefaultApiGetConversationRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiGetConversation
     */
    readonly xChatKey: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiGetConversation
     */
    readonly id: string;
}
/**
 * Request parameters for getMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiGetMessageRequest
 */
export interface DefaultApiGetMessageRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiGetMessage
     */
    readonly xChatKey: string;
    /**
     * Id of the Message
     * @type {string}
     * @memberof DefaultApiGetMessage
     */
    readonly id: string;
}
/**
 * Request parameters for getOrCreateConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrCreateConversationRequest
 */
export interface DefaultApiGetOrCreateConversationRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiGetOrCreateConversation
     */
    readonly xChatKey: string;
    /**
     * Conversation data
     * @type {GetOrCreateConversationBody}
     * @memberof DefaultApiGetOrCreateConversation
     */
    readonly getOrCreateConversationBody?: GetOrCreateConversationBody;
}
/**
 * Request parameters for getOrCreateMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrCreateMessageRequest
 */
export interface DefaultApiGetOrCreateMessageRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiGetOrCreateMessage
     */
    readonly xChatKey: string;
    /**
     * Message data
     * @type {GetOrCreateMessageBody}
     * @memberof DefaultApiGetOrCreateMessage
     */
    readonly getOrCreateMessageBody?: GetOrCreateMessageBody;
}
/**
 * Request parameters for getParticipant operation in DefaultApi.
 * @export
 * @interface DefaultApiGetParticipantRequest
 */
export interface DefaultApiGetParticipantRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiGetParticipant
     */
    readonly xChatKey: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiGetParticipant
     */
    readonly id: string;
    /**
     * User id
     * @type {string}
     * @memberof DefaultApiGetParticipant
     */
    readonly userId: string;
}
/**
 * Request parameters for getUser operation in DefaultApi.
 * @export
 * @interface DefaultApiGetUserRequest
 */
export interface DefaultApiGetUserRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiGetUser
     */
    readonly xChatKey: string;
}
/**
 * Request parameters for listConversationMessages operation in DefaultApi.
 * @export
 * @interface DefaultApiListConversationMessagesRequest
 */
export interface DefaultApiListConversationMessagesRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiListConversationMessages
     */
    readonly xChatKey: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiListConversationMessages
     */
    readonly id: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListConversationMessages
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listConversations operation in DefaultApi.
 * @export
 * @interface DefaultApiListConversationsRequest
 */
export interface DefaultApiListConversationsRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiListConversations
     */
    readonly xChatKey: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListConversations
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listParticipants operation in DefaultApi.
 * @export
 * @interface DefaultApiListParticipantsRequest
 */
export interface DefaultApiListParticipantsRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiListParticipants
     */
    readonly xChatKey: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiListParticipants
     */
    readonly id: string;
    /**
     * Provide the &#x60;meta.nextToken&#x60; value provided in the last API response to retrieve the next page of results
     * @type {string}
     * @memberof DefaultApiListParticipants
     */
    readonly nextToken?: string;
}
/**
 * Request parameters for listenConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiListenConversationRequest
 */
export interface DefaultApiListenConversationRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiListenConversation
     */
    readonly xChatKey: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiListenConversation
     */
    readonly id: string;
}
/**
 * Request parameters for removeParticipant operation in DefaultApi.
 * @export
 * @interface DefaultApiRemoveParticipantRequest
 */
export interface DefaultApiRemoveParticipantRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiRemoveParticipant
     */
    readonly xChatKey: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiRemoveParticipant
     */
    readonly id: string;
    /**
     * User id
     * @type {string}
     * @memberof DefaultApiRemoveParticipant
     */
    readonly userId: string;
}
/**
 * Request parameters for updateConversation operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateConversationRequest
 */
export interface DefaultApiUpdateConversationRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiUpdateConversation
     */
    readonly xChatKey: string;
    /**
     * Conversation id
     * @type {string}
     * @memberof DefaultApiUpdateConversation
     */
    readonly id: string;
    /**
     * Conversation data
     * @type {UpdateConversationBody}
     * @memberof DefaultApiUpdateConversation
     */
    readonly updateConversationBody?: UpdateConversationBody;
}
/**
 * Request parameters for updateMessage operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateMessageRequest
 */
export interface DefaultApiUpdateMessageRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiUpdateMessage
     */
    readonly xChatKey: string;
    /**
     * Message id
     * @type {string}
     * @memberof DefaultApiUpdateMessage
     */
    readonly id: string;
    /**
     * Message data
     * @type {UpdateMessageBody}
     * @memberof DefaultApiUpdateMessage
     */
    readonly updateMessageBody?: UpdateMessageBody;
}
/**
 * Request parameters for updateUser operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateUserRequest
 */
export interface DefaultApiUpdateUserRequest {
    /**
     * Authentication Key
     * @type {string}
     * @memberof DefaultApiUpdateUser
     */
    readonly xChatKey: string;
    /**
     * User data
     * @type {UpdateUserBody}
     * @memberof DefaultApiUpdateUser
     */
    readonly updateUserBody?: UpdateUserBody;
}
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     * Add a [Participant](#schema_user) to a [Conversation](#schema_conversation).
     * @param {DefaultApiAddParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    addParticipant(requestParameters: DefaultApiAddParticipantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AddParticipantResponse, any>>;
    /**
     * Creates a new [Conversation](#schema_conversation)
     * @param {DefaultApiCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createConversation(requestParameters: DefaultApiCreateConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateConversationResponse, any>>;
    /**
     * Creates a new [Message](#schema_message)
     * @param {DefaultApiCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createMessage(requestParameters: DefaultApiCreateMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateMessageResponse, any>>;
    /**
     * Creates a new [User](#schema_user)
     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    createUser(requestParameters?: DefaultApiCreateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateUserResponse, any>>;
    /**
     * Permanently deletes a [Conversation](#schema_conversation). It cannot be undone. Also immediately deletes corresponding [Messages](#schema_message).
     * @param {DefaultApiDeleteConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteConversation(requestParameters: DefaultApiDeleteConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Permanently deletes a [Message](#schema_message). It cannot be undone.
     * @param {DefaultApiDeleteMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteMessage(requestParameters: DefaultApiDeleteMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Permanently deletes a [User](#schema_user). It cannot be undone.
     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Retrieves the [Conversation](#schema_conversation) object for a valid identifier.
     * @param {DefaultApiGetConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getConversation(requestParameters: DefaultApiGetConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetConversationResponse, any>>;
    /**
     * Retrieves the [Message](#schema_message) object for a valid identifier.
     * @param {DefaultApiGetMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getMessage(requestParameters: DefaultApiGetMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetMessageResponse, any>>;
    /**
     * Creates a new [Conversation](#schema_conversation) if it does not exist yet, otherwise returns the existing one
     * @param {DefaultApiGetOrCreateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrCreateConversation(requestParameters: DefaultApiGetOrCreateConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrCreateConversationResponse, any>>;
    /**
     * Creates a new [Message](#schema_message) if it does not exist yet, otherwise returns the existing one
     * @param {DefaultApiGetOrCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOrCreateMessage(requestParameters: DefaultApiGetOrCreateMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOrCreateMessageResponse, any>>;
    /**
     * Retrieves a [Participant](#schema_user) from a [Conversation](#schema_conversation).
     * @param {DefaultApiGetParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getParticipant(requestParameters: DefaultApiGetParticipantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetParticipantResponse, any>>;
    /**
     * Retrieves the [User](#schema_user) object for a valid identifier.
     * @param {DefaultApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getUser(requestParameters: DefaultApiGetUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUserResponse, any>>;
    /**
     * Retrieves the conversation\'s [Messages](#schema_message)
     * @param {DefaultApiListConversationMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listConversationMessages(requestParameters: DefaultApiListConversationMessagesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListConversationMessagesResponse, any>>;
    /**
     * Returns a list of [Conversation](#schema_conversation) objects
     * @param {DefaultApiListConversationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listConversations(requestParameters: DefaultApiListConversationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListConversationsResponse, any>>;
    /**
     * Retrieves a list of [Participants](#schema_user) for a given [Conversation](#schema_conversation).
     * @param {DefaultApiListParticipantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listParticipants(requestParameters: DefaultApiListParticipantsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListParticipantsResponse, any>>;
    /**
     * Creates a SSE stream to receive messages and events from a conversation
     * @param {DefaultApiListenConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    listenConversation(requestParameters: DefaultApiListenConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Remove a [Participant](#schema_user) from a [Conversation](#schema_conversation).
     * @param {DefaultApiRemoveParticipantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    removeParticipant(requestParameters: DefaultApiRemoveParticipantRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Creates a new [Conversation](#schema_conversation)
     * @param {DefaultApiUpdateConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateConversation(requestParameters: DefaultApiUpdateConversationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateConversationResponse, any>>;
    /**
     * Update a [Message](#schema_message)
     * @param {DefaultApiUpdateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateMessage(requestParameters: DefaultApiUpdateMessageRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateMessageResponse, any>>;
    /**
     * Update [User](#schema_user)
     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateUserResponse, any>>;
}
