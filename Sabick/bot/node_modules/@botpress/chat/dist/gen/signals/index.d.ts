import type { MessageCreatedSignal } from './messageCreatedSignal.t';
export declare const zod: {
    messageCreatedSignal: import("zod").ZodObject<{
        type: import("zod").ZodLiteral<"message_created">;
        data: import("zod").ZodObject<{
            id: import("zod").ZodString;
            fid: import("zod").ZodOptional<import("zod").ZodString>;
            createdAt: import("zod").ZodString;
            payload: import("zod").ZodUnion<[import("zod").ZodObject<{
                type: import("zod").ZodLiteral<"button">;
                variant: import("zod").ZodEnum<["action", "link"]>;
                reusable: import("zod").ZodOptional<import("zod").ZodBoolean>;
                groupId: import("zod").ZodOptional<import("zod").ZodString>;
                text: import("zod").ZodString;
                buttonValue: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                text: string;
                type: "button";
                variant: "link" | "action";
                buttonValue: string;
                reusable?: boolean | undefined;
                groupId?: string | undefined;
            }, {
                text: string;
                type: "button";
                variant: "link" | "action";
                buttonValue: string;
                reusable?: boolean | undefined;
                groupId?: string | undefined;
            }>, import("zod").ZodObject<{
                type: import("zod").ZodLiteral<"text">;
                text: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                text: string;
                type: "text";
            }, {
                text: string;
                type: "text";
            }>, import("zod").ZodObject<{
                type: import("zod").ZodLiteral<"image">;
                orientation: import("zod").ZodOptional<import("zod").ZodEnum<["portrait", "landscape", "square", "auto"]>>;
                url: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                url: string;
                type: "image";
                orientation?: "portrait" | "landscape" | "square" | "auto" | undefined;
            }, {
                url: string;
                type: "image";
                orientation?: "portrait" | "landscape" | "square" | "auto" | undefined;
            }>, import("zod").ZodObject<{
                type: import("zod").ZodLiteral<"audio">;
                url: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                url: string;
                type: "audio";
            }, {
                url: string;
                type: "audio";
            }>, import("zod").ZodObject<{
                type: import("zod").ZodLiteral<"video">;
                url: import("zod").ZodString;
            }, "strip", import("zod").ZodTypeAny, {
                url: string;
                type: "video";
            }, {
                url: string;
                type: "video";
            }>, import("zod").ZodObject<{
                type: import("zod").ZodLiteral<"file">;
                url: import("zod").ZodString;
                title: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                url: string;
                type: "file";
                title?: string | undefined;
            }, {
                url: string;
                type: "file";
                title?: string | undefined;
            }>, import("zod").ZodObject<{
                type: import("zod").ZodLiteral<"location">;
                latitude: import("zod").ZodNumber;
                longitude: import("zod").ZodNumber;
                title: import("zod").ZodOptional<import("zod").ZodString>;
            }, "strip", import("zod").ZodTypeAny, {
                type: "location";
                latitude: number;
                longitude: number;
                title?: string | undefined;
            }, {
                type: "location";
                latitude: number;
                longitude: number;
                title?: string | undefined;
            }>, import("zod").ZodObject<{
                type: import("zod").ZodLiteral<"custom">;
                payload: import("zod").ZodObject<{}, "strip", import("zod").ZodAny, import("zod").objectOutputType<{}, import("zod").ZodAny, "strip">, import("zod").objectInputType<{}, import("zod").ZodAny, "strip">>;
            }, "strip", import("zod").ZodTypeAny, {
                type: "custom";
                payload: {} & {
                    [k: string]: any;
                };
            }, {
                type: "custom";
                payload: {} & {
                    [k: string]: any;
                };
            }>]>;
            userId: import("zod").ZodString;
            conversationId: import("zod").ZodString;
        }, "strip", import("zod").ZodTypeAny, {
            id: string;
            userId: string;
            payload: {
                text: string;
                type: "button";
                variant: "link" | "action";
                buttonValue: string;
                reusable?: boolean | undefined;
                groupId?: string | undefined;
            } | {
                text: string;
                type: "text";
            } | {
                url: string;
                type: "image";
                orientation?: "portrait" | "landscape" | "square" | "auto" | undefined;
            } | {
                url: string;
                type: "audio";
            } | {
                url: string;
                type: "video";
            } | {
                url: string;
                type: "file";
                title?: string | undefined;
            } | {
                type: "location";
                latitude: number;
                longitude: number;
                title?: string | undefined;
            } | {
                type: "custom";
                payload: {} & {
                    [k: string]: any;
                };
            };
            conversationId: string;
            createdAt: string;
            fid?: string | undefined;
        }, {
            id: string;
            userId: string;
            payload: {
                text: string;
                type: "button";
                variant: "link" | "action";
                buttonValue: string;
                reusable?: boolean | undefined;
                groupId?: string | undefined;
            } | {
                text: string;
                type: "text";
            } | {
                url: string;
                type: "image";
                orientation?: "portrait" | "landscape" | "square" | "auto" | undefined;
            } | {
                url: string;
                type: "audio";
            } | {
                url: string;
                type: "video";
            } | {
                url: string;
                type: "file";
                title?: string | undefined;
            } | {
                type: "location";
                latitude: number;
                longitude: number;
                title?: string | undefined;
            } | {
                type: "custom";
                payload: {} & {
                    [k: string]: any;
                };
            };
            conversationId: string;
            createdAt: string;
            fid?: string | undefined;
        }>;
    }, "strip", import("zod").ZodTypeAny, {
        data: {
            id: string;
            userId: string;
            payload: {
                text: string;
                type: "button";
                variant: "link" | "action";
                buttonValue: string;
                reusable?: boolean | undefined;
                groupId?: string | undefined;
            } | {
                text: string;
                type: "text";
            } | {
                url: string;
                type: "image";
                orientation?: "portrait" | "landscape" | "square" | "auto" | undefined;
            } | {
                url: string;
                type: "audio";
            } | {
                url: string;
                type: "video";
            } | {
                url: string;
                type: "file";
                title?: string | undefined;
            } | {
                type: "location";
                latitude: number;
                longitude: number;
                title?: string | undefined;
            } | {
                type: "custom";
                payload: {} & {
                    [k: string]: any;
                };
            };
            conversationId: string;
            createdAt: string;
            fid?: string | undefined;
        };
        type: "message_created";
    }, {
        data: {
            id: string;
            userId: string;
            payload: {
                text: string;
                type: "button";
                variant: "link" | "action";
                buttonValue: string;
                reusable?: boolean | undefined;
                groupId?: string | undefined;
            } | {
                text: string;
                type: "text";
            } | {
                url: string;
                type: "image";
                orientation?: "portrait" | "landscape" | "square" | "auto" | undefined;
            } | {
                url: string;
                type: "audio";
            } | {
                url: string;
                type: "video";
            } | {
                url: string;
                type: "file";
                title?: string | undefined;
            } | {
                type: "location";
                latitude: number;
                longitude: number;
                title?: string | undefined;
            } | {
                type: "custom";
                payload: {} & {
                    [k: string]: any;
                };
            };
            conversationId: string;
            createdAt: string;
            fid?: string | undefined;
        };
        type: "message_created";
    }>;
};
export declare const json: {
    messageCreatedSignal: {
        type: string;
        properties: {
            type: {
                type: string;
                const: string;
            };
            data: {
                type: string;
                properties: {
                    id: {
                        type: string;
                    };
                    fid: {
                        type: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    payload: {
                        anyOf: ({
                            type: string;
                            properties: {
                                type: {
                                    type: string;
                                    const: string;
                                };
                                variant: {
                                    type: string;
                                    enum: string[];
                                };
                                reusable: {
                                    type: string;
                                };
                                groupId: {
                                    type: string;
                                };
                                text: {
                                    type: string;
                                };
                                buttonValue: {
                                    type: string;
                                };
                                orientation?: undefined;
                                url?: undefined;
                                title?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                payload?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                type: {
                                    type: string;
                                    const: string;
                                };
                                text: {
                                    type: string;
                                };
                                variant?: undefined;
                                reusable?: undefined;
                                groupId?: undefined;
                                buttonValue?: undefined;
                                orientation?: undefined;
                                url?: undefined;
                                title?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                payload?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                type: {
                                    type: string;
                                    const: string;
                                };
                                orientation: {
                                    type: string;
                                    enum: string[];
                                };
                                url: {
                                    type: string;
                                };
                                variant?: undefined;
                                reusable?: undefined;
                                groupId?: undefined;
                                text?: undefined;
                                buttonValue?: undefined;
                                title?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                payload?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                type: {
                                    type: string;
                                    const: string;
                                };
                                url: {
                                    type: string;
                                };
                                variant?: undefined;
                                reusable?: undefined;
                                groupId?: undefined;
                                text?: undefined;
                                buttonValue?: undefined;
                                orientation?: undefined;
                                title?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                payload?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                type: {
                                    type: string;
                                    const: string;
                                };
                                url: {
                                    type: string;
                                };
                                title: {
                                    type: string;
                                };
                                variant?: undefined;
                                reusable?: undefined;
                                groupId?: undefined;
                                text?: undefined;
                                buttonValue?: undefined;
                                orientation?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                                payload?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                type: {
                                    type: string;
                                    const: string;
                                };
                                latitude: {
                                    type: string;
                                };
                                longitude: {
                                    type: string;
                                };
                                title: {
                                    type: string;
                                };
                                variant?: undefined;
                                reusable?: undefined;
                                groupId?: undefined;
                                text?: undefined;
                                buttonValue?: undefined;
                                orientation?: undefined;
                                url?: undefined;
                                payload?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        } | {
                            type: string;
                            properties: {
                                type: {
                                    type: string;
                                    const: string;
                                };
                                payload: {
                                    type: string;
                                    properties: {};
                                    additionalProperties: boolean;
                                };
                                variant?: undefined;
                                reusable?: undefined;
                                groupId?: undefined;
                                text?: undefined;
                                buttonValue?: undefined;
                                orientation?: undefined;
                                url?: undefined;
                                title?: undefined;
                                latitude?: undefined;
                                longitude?: undefined;
                            };
                            required: string[];
                            additionalProperties: boolean;
                        })[];
                    };
                    userId: {
                        type: string;
                    };
                    conversationId: {
                        type: string;
                    };
                };
                required: string[];
                additionalProperties: boolean;
            };
        };
        required: string[];
        additionalProperties: boolean;
        $schema: string;
    };
};
export type Types = {
    messageCreatedSignal: MessageCreatedSignal;
};
